<tool id="tl.draw_graph" name="tl.draw_graph" version="1.3.1+galaxy1">
    <description>Draw a force-directed graph</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements">
        <requirement type="package" version="0.2">fa2</requirement>
    </expand>
    <command detect_errors="exit_code"><![CDATA[
            python $script_file
        ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

sc.tl.draw_graph(
   adata=adata,
   layout='$layout',
   #if $root
   root=$root,
   #end if
   random_state=$random_state,
   copy=False)

@CMD_anndata_write_outputs@
np.savetxt('$X_draw_graph', adata.obsm['X_draw_graph_$layout'], delimiter='\t')
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <param argument="layout" type="select" label="Layout" help="">
            <option value="fa">fa: ForceAtlas2</option>
            <option value="fr">fr: Fruchterman Reingold</option>
            <option value="grid_fr">grid_fr: Grid Fruchterman Reingold, faster than 'fr'</option>
            <option value="kk">kk: Kamadi Kawai, slower than 'fr'</option>
            <option value="lgl">lgl: Large Graph, very fast</option>
            <option value="drl">Distributed Recursive Layout, pretty fast</option>
            <option value="rt">Reingold Tilford tree</option>
        </param>
        <param argument="root" type="integer" value="" optional="true" label="Root for tree layouts" help=""/>
        <param argument="random_state" type="integer" value="0" label="Random state" help="Change this to use different intial states for the optimization"/>
        <expand macro="anndata_output_format"/>
    </inputs>
    <outputs>
        <expand macro="anndata_outputs"/>
        <data name="X_draw_graph" format="tabular" label="${tool.name} on ${on_string}: Coordinates of graph layout"/>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pp.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="layout" value="fa"/>
            <param name="random_state" value="0"/>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="tl.draw_graph.neighbors.paul15_gauss_braycurtis.h5ad" ftype="h5" compare="sim_size"/>
            <output name="X_draw_graph" file="tl.draw_graph.neighbors.paul15_gauss_braycurtis.X_draw_graph.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
Force-directed graph drawing, an alternative to tSNE that often preserves the topology of the data
better. This requires to run `pp.neighbors`, first.

The default layout ('fa', `ForceAtlas2`, Jacomy et al 2014) uses the package `fa2
<https://github.com/bhargavchippada/forceatlas2>`__ (Chippada et al 2018), which can
be installed via `pip install fa2`.

`Force-directed graph drawing
<https://en.wikipedia.org/wiki/Force-directed_graph_drawing>`__ describes a
class of long-established algorithms for visualizing graphs. It has been
suggested for visualizing single-cell data by Islam et al (2011). Many other layouts
as implemented in igraph [Csardi et al, 2006) are available. Similar approaches have
been used by Zunder et al (2015) or Weinreb et al (2017).

Returns
-------

X_draw_graph_`layout` : Coordinates of graph layout. E.g. for layout='fa' (the default), the field is called 'X_draw_graph_fa'


More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.tl.umap.html#scanpy.api.tl.umap>`_
    ]]></help>
    <expand macro="citations"/>
</tool>
