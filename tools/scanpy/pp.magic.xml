<tool id="pp.magic" name="pp.magic" version="1.3.1+galaxy1">
  <description>Markov Affinity-based Graph Imputation of Cells (MAGIC) API [vanDijk18]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.pp.magic(
   adata = '$adata',
   name_list = '$name_list',
   k = '$k',
   a = '$a',
   t = '$t',
   n_pca = '$n_pca',
   knn_dist = '$knn_dist',
   random_state = '$random_state',
   n_jobs = '$n_jobs',
   verbose = '$verbose',
   copy = '$copy',
   kwargs = '$kwargs',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="name_list" type="list" value="'all_genes'" optional="true" label="name_list" help="    Denoised genes to return. Default is all genes, but this    may require a large amount of memory if the input data is sparse."/>
    <param name="k" type="data" format="int" value="" optional="true" label="k" help="    number of nearest neighbors on which to build kernel"/>
    <param name="a" type="data" format="int" value="" optional="true" label="a" help="    sets decay rate of kernel tails.    If None, alpha decaying kernel is not used"/>
    <param name="t" type="data" format="int" value="" optional="true" label="t" help="    power to which the diffusion operator is powered.    This sets the level of diffusion. If 'auto', t is selected    according to the Procrustes disparity of the diffused data"/>
    <param name="n_pca" type="data" format="int" value="" optional="true" label="n_pca" help="    Number of principal components to use for calculating    neighborhoods. For extremely large datasets, using    n_pca &lt; 20 allows neighborhoods to be calculated in    roughly log(n_samples) time."/>
    <param name="knn_dist" type="data" format="string" value="" optional="true" label="knn_dist" help="    recommended values: 'euclidean', 'cosine', 'precomputed'    Any metric from `scipy.spatial.distance` can be used    distance metric for building kNN graph. If 'precomputed',    `data` should be an n_samples x n_samples distance or    affinity matrix"/>
    <param name="random_state" type="int" value="None" optional="true" label="random_state" help="    Random seed. Defaults to the global `numpy` random number generator"/>
    <param name="n_jobs" type="int" value="" optional="true" label="n_jobs" help="    Number of threads to use in training. All cores are used by default."/>
    <param name="verbose" type="bool" value="sc.settings.verbosity" optional="true" label="verbose" help="    If `True` or an integer `&gt;= 2`, print status messages.    If `None`, `sc.settings.verbosity` is used."/>
    <param name="copy" type="bool" value="" optional="true" label="copy" help="    If true, a copy of anndata is returned. If `None`, `copy` is True if    `genes` is not `'all_genes'` or `'pca_only'`. `copy` may only be False    if `genes` is `'all_genes'` or `'pca_only'`, as the resultant data    will otherwise have different column names from the input data."/>
    <param name="kwargs" type="data" format="additional arguments to `magic.MAGIC`" value="" label="kwargs" help=""/>
    </inputs>
  <outputs>
    <data name="If `copy` is True, AnnData object is returned." type="data" format="" label="${tool.name} on ${on_string}: If `copy` is True, AnnData object is returned."/>
    <data name="If `subset_genes` is not `all_genes`, PCA on MAGIC values of cells are stored in" type="data" format="" label="${tool.name} on ${on_string}: If `subset_genes` is not `all_genes`, PCA on MAGIC values of cells are stored in"/>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="The raw counts are stored in `.raw` attribute of AnnData object." type="data" format="" label="${tool.name} on ${on_string}: The raw counts are stored in `.raw` attribute of AnnData object."/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="name_list" value=""/>
      <param name="k" value=""/>
      <param name="a" value=""/>
      <param name="t" value=""/>
      <param name="n_pca" value=""/>
      <param name="knn_dist" value=""/>
      <param name="random_state" value=""/>
      <param name="n_jobs" value=""/>
      <param name="verbose" value=""/>
      <param name="copy" value=""/>
      <param name="kwargs" value=""/>
      <output name="If `copy` is True, AnnData object is returned." file=""/>
      <output name="If `subset_genes` is not `all_genes`, PCA on MAGIC values of cells are stored in" file=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="The raw counts are stored in `.raw` attribute of AnnData object." file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Markov Affinity-based Graph Imputation of Cells (MAGIC) API [vanDijk18]_.

MAGIC is an algorithm for denoising and transcript recover of single cells
applied to single-cell sequencing data. MAGIC builds a graph from the data
and uses diffusion to smooth out noise and recover the data manifold.

More information and bug reports
`here <https://github.com/KrishnaswamyLab/MAGIC>`__. For help, visit
<https://krishnaswamylab.org/get-help>.

Parameters
----------
adata : :class:`~scanpy.api.AnnData`
    An anndata file with `.raw` attribute representing raw counts.
name_list : `list`, `'all_genes'`, or `'pca_only'`, optional (default: `'all_genes'`)
    Denoised genes to return. Default is all genes, but this
    may require a large amount of memory if the input data is sparse.
k : int, optional, default: 10
    number of nearest neighbors on which to build kernel
a : int, optional, default: 15
    sets decay rate of kernel tails.
    If None, alpha decaying kernel is not used
t : int, optional, default: 'auto'
    power to which the diffusion operator is powered.
    This sets the level of diffusion. If 'auto', t is selected
    according to the Procrustes disparity of the diffused data
n_pca : int, optional, default: 100
    Number of principal components to use for calculating
    neighborhoods. For extremely large datasets, using
    n_pca < 20 allows neighborhoods to be calculated in
    roughly log(n_samples) time.
knn_dist : string, optional, default: 'euclidean'
    recommended values: 'euclidean', 'cosine', 'precomputed'
    Any metric from `scipy.spatial.distance` can be used
    distance metric for building kNN graph. If 'precomputed',
    `data` should be an n_samples x n_samples distance or
    affinity matrix
random_state : `int`, `numpy.RandomState` or `None`, optional (default: `None`)
    Random seed. Defaults to the global `numpy` random number generator
n_jobs : `int` or None, optional. Default: None
    Number of threads to use in training. All cores are used by default.
verbose : `bool`, `int` or `None`, optional (default: `sc.settings.verbosity`)
    If `True` or an integer `>= 2`, print status messages.
    If `None`, `sc.settings.verbosity` is used.
copy : `bool` or `None`, optional. Default: `None`.
    If true, a copy of anndata is returned. If `None`, `copy` is True if
    `genes` is not `'all_genes'` or `'pca_only'`. `copy` may only be False
    if `genes` is `'all_genes'` or `'pca_only'`, as the resultant data
    will otherwise have different column names from the input data.
kwargs : additional arguments to `magic.MAGIC`

Returns
-------
If `copy` is True, AnnData object is returned.

If `subset_genes` is not `all_genes`, PCA on MAGIC values of cells are stored in
`adata.obsm['X_magic']` and `adata.X` is not modified.

The raw counts are stored in `.raw` attribute of AnnData object.

Examples
--------
>>> import scanpy.api as sc
>>> import magic
>>> adata = sc.datasets.paul15()
>>> sc.pp.normalize_per_cell(adata)
>>> sc.pp.sqrt(adata)  # or sc.pp.log1p(adata)
>>> adata_magic = sc.pp.magic(adata, name_list=['Mpo', 'Klf1', 'Ifitm1'], k=5)
>>> adata_magic.shape
(2730, 3)
>>> sc.pp.magic(adata, name_list='pca_only', k=5)
>>> adata.obsm['X_magic'].shape
(2730, 100)
>>> sc.pp.magic(adata, name_list='all_genes', k=5)
>>> adata.X.shape
(2730, 3451)
    ]]></help>
  <expand macro="citations"/>
</tool>
