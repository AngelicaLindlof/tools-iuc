<tool id="pl.paga_path" name="pl.paga_path" version="1.3.1+galaxy1">
  <description>Gene expression and annotation changes along paths in the abstracted graph.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc
@CMD_set_figure_params
@CMD_read_inputs

sc.pl.paga_path(
   adata = '$adata',
   nodes = '$nodes',
   keys = '$keys',
   use_raw = '$use_raw',
   annotations = '$annotations',
   color_map = '$color_map',
   color_maps_annotations = '$color_maps_annotations',
   palette_groups = '$palette_groups',
   n_avg = '$n_avg',
   groups_key = '$groups_key',
   as_heatmap = '$as_heatmap',
   show_node_names = '$show_node_names',
   show_colorbar = '$show_colorbar',
   show_yticks = '$show_yticks',
   normalize_to_zero_one = '$normalize_to_zero_one',
   return_data = '$return_data',
   show = '$show',
   save = '$save',
   ax = '$ax',)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="nodes" type="data" format="list of group names or their category indices" value="" label="nodes" help="    A path through nodes of the abstracted graph, that is, names or indices    (within `.categories`) of groups that have been used to run PAGA."/>
    <param name="keys" type="data" format="list of str" value="" label="keys" help="    Either variables in `adata.var_names` or annotations in    `adata.obs`. They are plotted using `color_map`."/>
    <param name="use_raw" type="bool" value="True" optional="true" label="use_raw" help="    Use `adata.raw` for retrieving gene expressions if it has been set."/>
    <param name="annotations" type="data" format="list of annotations" value="" optional="true" label="annotations" help="    Plot these keys with `color_maps_annotations`. Need to be keys for    `adata.obs`."/>
    <param name="color_map" type="data" format="color map for plotting keys or `None`" value="None" optional="true" label="color_map" help="    Matplotlib colormap."/>
    <param name="color_maps_annotations" type="data" format="dict storing color maps or `None`" value="" optional="true" label="color_maps_annotations" help="    Color maps for plotting the annotations. Keys of the dictionary must    appear in `annotations`."/>
    <param name="palette_groups" type="data" format="list of colors or `None`" value="None" optional="true" label="palette_groups" help="    Ususally, use the same `sc.pl.palettes...` as used for coloring the    abstracted graph."/>
    <param name="n_avg" type="int" value="" optional="true" label="n_avg" help="    Number of data points to include in computation of running average."/>
    <param name="groups_key" type="str" value="None" optional="true" label="groups_key" help="    Key of the grouping used to run PAGA. If `None`, defaults to    `adata.uns['paga']['groups']`."/>
    <param name="as_heatmap" type="bool" value="True" optional="true" label="as_heatmap" help="    Plot the timeseries as heatmap. If not plotting as heatmap,    `annotations` have no effect."/>
    <param name="show_node_names" type="bool" value="True" optional="true" label="show_node_names" help="    Plot the node names on the nodes bar."/>
    <param name="show_colorbar" type="bool" value="True" optional="true" label="show_colorbar" help="    Show the colorbar."/>
    <param name="show_yticks" type="bool" value="True" optional="true" label="show_yticks" help="    Show the y ticks."/>
    <param name="normalize_to_zero_one" type="bool" value="True" optional="true" label="normalize_to_zero_one" help="    Shift and scale the running average to [0, 1] per gene."/>
    <param name="return_data" type="bool" value="False" optional="true" label="return_data" help="    Return the timeseries data in addition to the axes if `True`."/>
    <param name="show" type="bool" value="None" optional="true" label="show" help="     Show the plot, do not return axis."/>
    <param name="save" type="bool" value="None" optional="true" label="save" help="    If `True` or a `str`, save the figure. A string is appended to the    default filename. Infer the filetype if ending on \{'.pdf', '.png', '.svg'\}."/>
    <param name="ax" type="matplotlib.Axes" value="" label="ax" help="     A matplotlib axes object."/>
    <section name="pl_settings" title="Plot settings" expanded="false"><expand macro="inputs_set_figure_params"/></section></inputs>
  <outputs>
    <data name="A `matplotlib.Axes`, if `ax` is `None`, else `None`. If `return_data`," type="data" format="" label="${tool.name} on ${on_string}: A `matplotlib.Axes`, if `ax` is `None`, else `None`. If `return_data`,"/>
    <data name="return the timeseries data in addition to an axes." type="data" format="" label="${tool.name} on ${on_string}: return the timeseries data in addition to an axes."/>
    </outputs>
  <tests>
    <test>
      <param name="nodes" value=""/>
      <param name="keys" value=""/>
      <param name="use_raw" value=""/>
      <param name="annotations" value=""/>
      <param name="color_map" value=""/>
      <param name="color_maps_annotations" value=""/>
      <param name="palette_groups" value=""/>
      <param name="n_avg" value=""/>
      <param name="groups_key" value=""/>
      <param name="as_heatmap" value=""/>
      <param name="show_node_names" value=""/>
      <param name="show_colorbar" value=""/>
      <param name="show_yticks" value=""/>
      <param name="normalize_to_zero_one" value=""/>
      <param name="return_data" value=""/>
      <param name="show" value=""/>
      <param name="save" value=""/>
      <param name="ax" value=""/>
      <expand macro="tests_set_figure_params"/>
      <output name="A `matplotlib.Axes`, if `ax` is `None`, else `None`. If `return_data`," file=""/>
      <output name="return the timeseries data in addition to an axes." file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Gene expression and annotation changes along paths in the abstracted graph.

Parameters
----------
adata : :class:`~anndata.AnnData`
    An annotated data matrix.
nodes : list of group names or their category indices
    A path through nodes of the abstracted graph, that is, names or indices
    (within `.categories`) of groups that have been used to run PAGA.
keys : list of str
    Either variables in `adata.var_names` or annotations in
    `adata.obs`. They are plotted using `color_map`.
use_raw : `bool`, optional (default: `True`)
    Use `adata.raw` for retrieving gene expressions if it has been set.
annotations : list of annotations, optional (default: ['dpt_pseudotime'])
    Plot these keys with `color_maps_annotations`. Need to be keys for
    `adata.obs`.
color_map : color map for plotting keys or `None`, optional (default: `None`)
    Matplotlib colormap.
color_maps_annotations : dict storing color maps or `None`, optional (default: {'dpt_pseudotime': 'Greys'})
    Color maps for plotting the annotations. Keys of the dictionary must
    appear in `annotations`.
palette_groups : list of colors or `None`, optional (default: `None`)
    Ususally, use the same `sc.pl.palettes...` as used for coloring the
    abstracted graph.
n_avg : `int`, optional (default: 1)
    Number of data points to include in computation of running average.
groups_key : `str`, optional (default: `None`)
    Key of the grouping used to run PAGA. If `None`, defaults to
    `adata.uns['paga']['groups']`.
as_heatmap : `bool`, optional (default: `True`)
    Plot the timeseries as heatmap. If not plotting as heatmap,
    `annotations` have no effect.
show_node_names : `bool`, optional (default: `True`)
    Plot the node names on the nodes bar.
show_colorbar : `bool`, optional (default: `True`)
    Show the colorbar.
show_yticks : `bool`, optional (default: `True`)
    Show the y ticks.
normalize_to_zero_one : `bool`, optional (default: `True`)
    Shift and scale the running average to [0, 1] per gene.
return_data : `bool`, optional (default: `False`)
    Return the timeseries data in addition to the axes if `True`.
show : `bool`, optional (default: `None`)
     Show the plot, do not return axis.
save : `bool` or `str`, optional (default: `None`)
    If `True` or a `str`, save the figure. A string is appended to the
    default filename. Infer the filetype if ending on \{'.pdf', '.png', '.svg'\}.
ax : `matplotlib.Axes`
     A matplotlib axes object.

Returns
-------
A `matplotlib.Axes`, if `ax` is `None`, else `None`. If `return_data`,
return the timeseries data in addition to an axes.
    ]]></help>
  <expand macro="citations"/>
</tool>
