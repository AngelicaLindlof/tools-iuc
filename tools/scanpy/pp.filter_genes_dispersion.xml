<tool id="pp.filter_genes_dispersion" name="pp.filter_genes_dispersion" version="1.3.1+galaxy1">
  <description>Extract highly variable genes [Satija15]_ [Zheng17]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.pp.filter_genes_dispersion(
   data = '$adata',
   flavor = '$flavor',
   min_mean=0.0125, max_mean=3, min_disp=0.5, max_disp=`None` = '$min_mean=0.0125, max_mean=3, min_disp=0.5, max_disp=`None`',
   n_bins = '$n_bins',
   n_top_genes = '$n_top_genes',
   log = '$log',
   copy = '$copy',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="flavor" type="data" format="{'seurat'" value="" optional="true" label="flavor" help="    Choose the flavor for computing normalized dispersion. If choosing    'seurat', this expects non-logarithmized data - the logarithm of mean    and dispersion is taken internally when `log` is at its default value    `True`. For 'cell_ranger', this is usually called for logarithmized data    - in this case you should set `log` to `False`. In their default    workflows, Seurat passes the cutoffs whereas Cell Ranger passes    `n_top_genes`."/>
    <param name="min_mean=0.0125, max_mean=3, min_disp=0.5, max_disp=`None`" type="float" value="" optional="true" label="min_mean=0.0125, max_mean=3, min_disp=0.5, max_disp=`None`" help="    If `n_top_genes` unequals `None`, these cutoffs for the means and the    normalized dispersions are ignored."/>
    <param name="n_bins" type="int" value="" label="n_bins" help="    Number of bins for binning the mean gene expression. Normalization is    done with respect to each bin. If just a single gene falls into a bin,    the normalized dispersion is artificially set to 1. You'll be informed    about this if you set `settings.verbosity = 4`."/>
    <param name="n_top_genes" type="int" value="None" label="n_top_genes" help="    Number of highly-variable genes to keep."/>
    <param name="log" type="bool" value="True" optional="true" label="log" help="    Use the logarithm of the mean to variance ratio."/>
    <param name="copy" type="bool" value="False" optional="true" label="copy" help="    If an :class:`~anndata.AnnData` is passed, determines whether a copy    is returned."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="means" type="data" format="adata.var" label="${tool.name} on ${on_string}: means"/>
    <data name="dispersions" type="data" format="adata.var" label="${tool.name} on ${on_string}: dispersions"/>
    <data name="dispersions_norm" type="data" format="adata.var" label="${tool.name} on ${on_string}: dispersions_norm"/>
    <data name="If a data matrix `X` is passed, the annotation is returned as `np.recarray`     with the same information stored in fields: `gene_subset`, `means`, `dispersions`, `dispersion_norm`." type="data" format="" label="${tool.name} on ${on_string}: If a data matrix `X` is passed, the annotation is returned as `np.recarray`     with the same information stored in fields: `gene_subset`, `means`, `dispersions`, `dispersion_norm`."/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="flavor" value=""/>
      <param name="min_mean=0.0125, max_mean=3, min_disp=0.5, max_disp=`None`" value=""/>
      <param name="n_bins" value=""/>
      <param name="n_top_genes" value=""/>
      <param name="log" value=""/>
      <param name="copy" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="means" file=""/>
      <output name="dispersions" file=""/>
      <output name="dispersions_norm" file=""/>
      <output name="If a data matrix `X` is passed, the annotation is returned as `np.recarray`     with the same information stored in fields: `gene_subset`, `means`, `dispersions`, `dispersion_norm`." file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Extract highly variable genes [Satija15]_ [Zheng17]_.

If trying out parameters, pass the data matrix instead of AnnData.

Depending on `flavor`, this reproduces the R-implementations of Seurat
[Satija15]_ and Cell Ranger [Zheng17]_.

The normalized dispersion is obtained by scaling with the mean and standard
deviation of the dispersions for genes falling into a given bin for mean
expression of genes. This means that for each bin of mean expression, highly
variable genes are selected.

Use `flavor='cell_ranger'` with care and in the same way as in
:func:`~scanpy.api.pp.recipe_zheng17`.

Parameters
----------
data : :class:`~anndata.AnnData`, `np.ndarray`, `sp.sparse`
    The (annotated) data matrix of shape `n_obs` Ã— `n_vars`. Rows correspond
    to cells and columns to genes.
flavor : {'seurat', 'cell_ranger'}, optional (default: 'seurat')
    Choose the flavor for computing normalized dispersion. If choosing
    'seurat', this expects non-logarithmized data - the logarithm of mean
    and dispersion is taken internally when `log` is at its default value
    `True`. For 'cell_ranger', this is usually called for logarithmized data
    - in this case you should set `log` to `False`. In their default
    workflows, Seurat passes the cutoffs whereas Cell Ranger passes
    `n_top_genes`.
min_mean=0.0125, max_mean=3, min_disp=0.5, max_disp=`None` : `float`, optional
    If `n_top_genes` unequals `None`, these cutoffs for the means and the
    normalized dispersions are ignored.
n_bins : `int` (default: 20)
    Number of bins for binning the mean gene expression. Normalization is
    done with respect to each bin. If just a single gene falls into a bin,
    the normalized dispersion is artificially set to 1. You'll be informed
    about this if you set `settings.verbosity = 4`.
n_top_genes : `int` or `None` (default: `None`)
    Number of highly-variable genes to keep.
log : `bool`, optional (default: `True`)
    Use the logarithm of the mean to variance ratio.
copy : `bool`, optional (default: `False`)
    If an :class:`~anndata.AnnData` is passed, determines whether a copy
    is returned.

Returns
-------
If an AnnData `adata` is passed, returns or updates `adata` depending on     `copy`. It filters the `adata` and adds the annotations

means : adata.var
    Means per gene. Logarithmized when `log` is `True`.
dispersions : adata.var
    Dispersions per gene. Logarithmized when `log` is `True`.
dispersions_norm : adata.var
    Normalized dispersions per gene. Logarithmized when `log` is `True`.

If a data matrix `X` is passed, the annotation is returned as `np.recarray`     with the same information stored in fields: `gene_subset`, `means`, `dispersions`, `dispersion_norm`.
    ]]></help>
  <expand macro="citations"/>
</tool>
