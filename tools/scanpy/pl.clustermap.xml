<tool id="pl.clustermap" name="pl.clustermap" version="1.3.1+galaxy1">
  <description>Hierarchically-clustered heatmap.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc
@CMD_set_figure_params
@CMD_read_inputs

sc.pl.clustermap(
   adata = '$adata',
   obs_keys = '$obs_keys',
   use_raw = '$use_raw',
   show = '$show',
   save = '$save',
   ax = '$ax',
   **kwds = '$**kwds',)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="obs_keys" type="str" value="" label="obs_keys" help="    Categorical annotation to plot with a different color map.    Currently, only a single key is supported."/>
    <param name="use_raw" type="bool" value="None" optional="true" label="use_raw" help="    Use `raw` attribute of `adata` if present."/>
    <param name="show" type="bool" value="None" optional="true" label="show" help="     Show the plot, do not return axis."/>
    <param name="save" type="bool" value="None" optional="true" label="save" help="    If `True` or a `str`, save the figure. A string is appended to the default    filename. Infer the filetype if ending on {'.pdf', '.png', '.svg'}."/>
    <param name="ax" type="matplotlib.Axes" value="None" optional="true" label="ax" help="    A matplotlib axes object. Only works if plotting a single component."/>
    <param name="**kwds" type="data" format="keyword arguments" value="" label="**kwds" help="    Keyword arguments passed to `seaborn.clustermap    &lt;https://seaborn.pydata.org/generated/seaborn.clustermap.html&gt;`__."/>
    <section name="pl_settings" title="Plot settings" expanded="false"><expand macro="inputs_set_figure_params"/></section></inputs>
  <outputs>
    <data name="If `show == False`, a `seaborn.ClusterGrid` object." type="data" format="" label="${tool.name} on ${on_string}: If `show == False`, a `seaborn.ClusterGrid` object."/>
    </outputs>
  <tests>
    <test>
      <param name="obs_keys" value=""/>
      <param name="use_raw" value=""/>
      <param name="show" value=""/>
      <param name="save" value=""/>
      <param name="ax" value=""/>
      <param name="**kwds" value=""/>
      <expand macro="tests_set_figure_params"/>
      <output name="If `show == False`, a `seaborn.ClusterGrid` object." file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Hierarchically-clustered heatmap.

Wraps `seaborn.clustermap
<https://seaborn.pydata.org/generated/seaborn.clustermap.html>`__ for
:class:`~anndata.AnnData`.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
obs_keys : `str`
    Categorical annotation to plot with a different color map.
    Currently, only a single key is supported.
use_raw : `bool`, optional (default: `None`)
    Use `raw` attribute of `adata` if present.
show : `bool`, optional (default: `None`)
     Show the plot, do not return axis.
save : `bool` or `str`, optional (default: `None`)
    If `True` or a `str`, save the figure. A string is appended to the default
    filename. Infer the filetype if ending on {'.pdf', '.png', '.svg'}.
ax : `matplotlib.Axes`, optional (default: `None`)
    A matplotlib axes object. Only works if plotting a single component.
**kwds : keyword arguments
    Keyword arguments passed to `seaborn.clustermap
    <https://seaborn.pydata.org/generated/seaborn.clustermap.html>`__.

Returns
-------
If `show == False`, a `seaborn.ClusterGrid` object.

Notes
-----
The returned object has a savefig() method that should be used if you want
to save the figure object without clipping the dendrograms.

To access the reordered row indices, use:
clustergrid.dendrogram_row.reordered_ind

Column indices, use: clustergrid.dendrogram_col.reordered_ind

Examples
--------
Soon to come with figures. In the meanwile, see
https://seaborn.pydata.org/generated/seaborn.clustermap.html.

>>> import scanpy.api as sc
>>> adata = sc.datasets.krumsiek11()
>>> sc.pl.clustermap(adata, obs_keys='cell_type')
    ]]></help>
  <expand macro="citations"/>
</tool>
