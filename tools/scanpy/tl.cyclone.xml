<tool id="tl.cyclone" name="tl.cyclone" version="1.3.1+galaxy1">
  <description>Assigns scores and predicted class to observations [Scialdone15]_ [Fechtner18]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.cyclone(
   adata = '$adata',
   marker_pairs = '$marker_pairs',
   subset_genes = '$subset_genes',
   subset_samples = '$subset_samples',
   iterations = '$iterations',
   min_iter = '$min_iter',
   min_pairs = '$min_pairs',
   n_jobs = '$n_jobs',)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="marker_pairs" type="dict" value="" label="marker_pairs" help="    Dictionary of marker pairs. See :func:`~scanpy.api.sandbag` output."/>
    <param name="subset_genes" type="list" value="None" optional="true" label="subset_genes" help="    Genes for sampling the reference set. Default is all genes."/>
    <param name="subset_samples" type="list" value="None" optional="true" label="subset_samples" help="    Cells for sampling the reference set. Default is all samples."/>
    <param name="iterations" type="int" value="" optional="true" label="iterations" help="    An integer scalar specifying the number of    iterations for random sampling to obtain a cycle score."/>
    <param name="min_iter" type="int" value="" optional="true" label="min_iter" help="    An integer scalar specifying the minimum number of iterations    for score estimation"/>
    <param name="min_pairs" type="int" value="" optional="true" label="min_pairs" help="    An integer scalar specifying the minimum number of iterations    for score estimation"/>
    <param name="n_jobs" type="int" value="" optional="true" label="n_jobs" help="    Number of concurrent n_jobs to be used. 0 = use all available cores."/>
    </inputs>
  <outputs>
    <data name="`dict` of `list`" type="data" format="" label="${tool.name} on ${on_string}: `dict` of `list`"/>
    <data name="{" type="data" format="" label="${tool.name} on ${on_string}: {"/>
    <data name="}" type="data" format="" label="${tool.name} on ${on_string}: }"/>
    </outputs>
  <tests>
    <test>
      <param name="marker_pairs" value=""/>
      <param name="subset_genes" value=""/>
      <param name="subset_samples" value=""/>
      <param name="iterations" value=""/>
      <param name="min_iter" value=""/>
      <param name="min_pairs" value=""/>
      <param name="n_jobs" value=""/>
      <output name="`dict` of `list`" file=""/>
      <output name="{" file=""/>
      <output name="}" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Assigns scores and predicted class to observations [Scialdone15]_ [Fechtner18]_.

Calculates scores for each observation and each phase and assigns prediction
based on marker pairs indentified by sandbag.

This reproduces the approach of [Scialdone15]_ in the implementation of
[Fechtner18]_.

Parameters
----------
adata : :class:`~anndata.AnnData`
    The annotated data matrix.
marker_pairs : `dict`
    Dictionary of marker pairs. See :func:`~scanpy.api.sandbag` output.
subset_genes : `list` or `None`, optional (default: `None`)
    Genes for sampling the reference set. Default is all genes.
subset_samples : `list` or `None`, optional (default: `None`)
    Cells for sampling the reference set. Default is all samples.
iterations : `int`, optional (default: 1000)
    An integer scalar specifying the number of
    iterations for random sampling to obtain a cycle score.
min_iter : `int`, optional (default: 100)
    An integer scalar specifying the minimum number of iterations
    for score estimation
min_pairs : `int`, optional (default: 50)
    An integer scalar specifying the minimum number of iterations
    for score estimation
n_jobs : `int`, optional (default: 1)
    Number of concurrent n_jobs to be used. 0 = use all available cores.

Returns
-------
`dict` of `list`
{
    "prediction": The predicted classes based on scores
    "prediction_normalized": The predicted classes based on normalized scores
    "scores": Prediction scores
    "normalized": Normalized prediction scores
}
    ]]></help>
  <expand macro="citations"/>
</tool>
