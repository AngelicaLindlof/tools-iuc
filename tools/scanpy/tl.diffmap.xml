<tool id="tl.diffmap" name="tl.diffmap" version="1.3.1+galaxy1">
    <description>Diffusion Maps</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
          python $script_file
      ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

sc.tl.diffmap(
    adata=adata,
    n_comps=$n_comps,
    copy =False)

@CMD_anndata_write_outputs@
np.savetxt('$X_diffmap', adata.obsm['X_diffmap'], delimiter='\t')
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <param argument="n_comps" type="integer" value="15" optional="true" label="Number of dimensions of the representation" help=""/>
        <expand macro="anndata_output_format"/>
    </inputs>
    <outputs>
        <expand macro="anndata_outputs"/>
        <data name="X_diffmap" format="tabular" label="${tool.name} on ${on_string}: Diffusion map representation"/>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="pp.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="n_comps" value="15"/>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="tl.diffmap.neighbors.paul15_gauss_braycurtis.h5ad" ftype="h5" compare="sim_size"/>
            <output name="X_diffmap" file="tl.diffmap.neighbors.paul15_gauss_braycurtis.X_diffmap.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
Diffusion maps (Coifman et al  2005) has been proposed for visualizing single-cell
data by Haghverdi et al (2015). The tool uses the adapted Gaussian kernel suggested
by Haghverdi et al (2016) in the implementation of Wolf et al (2017).

The width ("sigma") of the connectivity kernel is implicitly determined by
the number of neighbors used to compute the single-cell graph in
`pp.neighbors`. To reproduce the original implementation
using a Gaussian kernel, use `method=='gauss'` in
`pp.neighbors`. To use an exponential kernel, use the default
`method=='umap'`. Differences between these options shouldn't usually be
dramatic.

Returns
-------

X_diffmap : Diffusion map representation of data, which is the right eigen basis of the transition matrix with eigenvectors as columns.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.tl.diffmap.html#scanpy.api.tl.diffmap>`_
    ]]></help>
    <expand macro="citations"/>
</tool>
