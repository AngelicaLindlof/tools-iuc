<tool id="tl.sandbag" name="tl.sandbag" version="1.3.1+galaxy1">
  <description>Generate pairs of genes [Scialdone15]_ [Fechtner18]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.sandbag(
   adata = '$adata',
   phases = '$phases',
   fraction = '$fraction',
   subset_genes = '$subset_genes',
   subset_samples = '$subset_samples',
   n_jobs = '$n_jobs',)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="phases" type="dict" value="" label="phases" help="    Dictionary of lists, i.e. {phase: [sample, ...]},    containing annotation of samples to their phase"/>
    <param name="fraction" type="float" value="" optional="true" label="fraction" help="    Fraction to be used as threshold."/>
    <param name="subset_genes" type="list" value="None" optional="true" label="subset_genes" help="    Genes for sampling the reference set. Default is all genes."/>
    <param name="subset_samples" type="list" value="None" optional="true" label="subset_samples" help="    Cells for sampling the reference set. Default is all samples."/>
    <param name="n_jobs" type="int" value="" optional="true" label="n_jobs" help="    Number of concurrent n_jobs to be used. 0 = use all available cores."/>
    </inputs>
  <outputs>
    <data name="`dict` of `list` of `tuple`, i.e." type="data" format="" label="${tool.name} on ${on_string}: `dict` of `list` of `tuple`, i.e."/>
    <data name="{phase: [(Gene1, Gene2), ...]}," type="data" format="" label="${tool.name} on ${on_string}: {phase: [(Gene1, Gene2), ...]},"/>
    <data name="containing marker pairs per phase" type="data" format="" label="${tool.name} on ${on_string}: containing marker pairs per phase"/>
    </outputs>
  <tests>
    <test>
      <param name="phases" value=""/>
      <param name="fraction" value=""/>
      <param name="subset_genes" value=""/>
      <param name="subset_samples" value=""/>
      <param name="n_jobs" value=""/>
      <output name="`dict` of `list` of `tuple`, i.e." file=""/>
      <output name="{phase: [(Gene1, Gene2), ...]}," file=""/>
      <output name="containing marker pairs per phase" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Generate pairs of genes [Scialdone15]_ [Fechtner18]_.

Calculates the pairs of genes serving as marker pairs for each phase,
based on a matrix of gene counts and an annotation of known phases.

This reproduces the approach of [Scialdone15]_ in the implementation of
[Fechtner18]_.

More information and bug reports `here
<https://github.com/rfechtner/pypairs>`__.

Parameters
----------
adata : :class:`~anndata.AnnData`
    The annotated data matrix.
phases : `dict`
    Dictionary of lists, i.e. {phase: [sample, ...]},
    containing annotation of samples to their phase
fraction : `float`, optional (default: 0.5)
    Fraction to be used as threshold.
subset_genes : `list` or `None`, optional (default: `None`)
    Genes for sampling the reference set. Default is all genes.
subset_samples : `list` or `None`, optional (default: `None`)
    Cells for sampling the reference set. Default is all samples.
n_jobs : `int`, optional (default: 1)
    Number of concurrent n_jobs to be used. 0 = use all available cores.

Returns
-------
`dict` of `list` of `tuple`, i.e.
{phase: [(Gene1, Gene2), ...]},
containing marker pairs per phase
    ]]></help>
  <expand macro="citations"/>
</tool>
