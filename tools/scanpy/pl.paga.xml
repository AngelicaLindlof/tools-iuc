<tool id="pl.paga" name="pl.paga" version="1.3.1+galaxy1">
    <description>Plot the abstracted graph through thresholding low-connectivity edges</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
            python $script_file
        ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@
sc.settings.figdir = '.'

labels=[]
#for $i, $s in enumerate($labels)
labels.append('$s.label')
#end for
if len(labels) == 0:
  labels=None

root=[]
#for $i, $s in enumerate($roots)
root.append($s.root)
#end for
if len(root) == 0:
  root=None

sc.pl.paga(
    adata=adata,
    threshold=$threshold,
    color='$color',
    labels=labels,
    layout='$layout',
#if $init_pos
    init_pos=np.fromfile($init_pos, dtype=dt),
#end if
    random_state=$random_state,
    root=root,
#if $transitions
    transitions='$transitions',
#end if
    solid_edges='$solid_edges',
#if $dashed_edges
    dashed_edges='$dashed_edges',
#end if
    single_component=$single_component,
    fontsize=$fontsize,
    node_size_scale=$node_size_scale,
    node_size_power=$node_size_power,
    edge_width_scale=$edge_width_scale,
#if $min_edge_width
    min_edge_width=$min_edge_width,
#end if
#if $max_edge_width
    max_edge_width=$max_edge_width,
#end if
    arrowsize=$arrowsize,
#if $pos
    pos=np.fromfile($pos, dtype=dt),
#end if
    cmap='$cmap',
#if $title
    title='$title',
#end if
    frameon=$frameon,
    show=False,
    save='.$format')
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <param argument="threshold" type="float" value="0.01" label="Threshold to draw edges" help="Do not draw edges for weights below this threshold. Set to 0 if you want all edges. Discarding low-connectivity edges helps in getting a much clearer picture of the graph."/>
        <param argument="color" type="text" value="" label="The node colors" help="Gene name or obs. annotation, and also plots the degree of the abstracted graph when passing 'degree_dashed', 'degree_solid'."/>
        <repeat name="labels" title="Node label" help="If none is provided, this defaults to the group labels stored in the categorical for which `tl.paga` has been computed.">
            <param name="label" type="text" value="" label="Node label" help=""/>
        </repeat>
        <param argument="layout" type="select" value="" label="Plotting layout" help="">
            <option value="fa">fa: ForceAtlas2</option>
            <option value="fr">fr: Fruchterman-Reingold</option>
            <option value="fr">rt: stands for Reingold Tilford</option>
            <option value="fr">eq_tree: equally spaced tree</option>
        </param>
        <param argument="init_pos" type="data" format="tabular,csv,tsv" optional="true" label="Two-column tabular file storing the x and y coordinates for initializing the layout" help=""/>
        <param argument="random_state" type="integer" value="0" label="Random state" help="For layouts with random initialization like 'fr', change this to use different intial states for the optimization. If `None`, the initial state is not reproducible."/>
        <repeat name="roots" title="Root" help="If choosing a tree layout, this is the index of the root node or a list of root node indices. If this is a non-empty vector then the supplied node IDs are used as the roots of the trees (or a single tree if the graph is connected). If this is `None` or an empty list, the root vertices are automatically calculated based on topological sorting.">
            <param argument="root" type="integer" value="0" label="Root" help=""/>
        </repeat>
        <param argument="transitions" type="text" value="" label="Key corresponding to the matrix storing the arrows" help="Key for `.uns['paga']`, e.g. 'transistions_confidence'"/>
        <param argument="solid_edges" type="text" value="paga_connectivities" label="Key corresponding to the matrix storing the edges to be drawn solid black" help="Key for `.uns['paga']`"/>
        <param argument="dashed_edges" type="text" value="" optional="true" label="Key corresponding to the matrix storing the edges to be drawn dashed grey" help="Key for `.uns['paga']`. If not set, no dashed edges are drawn."/>
        <param argument="single_component" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Restrict to largest connected component?" help=""/>
        <param argument="fontsize" type="integer" value="1" label="Font size for node labels" help=""/>
        <param argument="node_size_scale" type="float" value="1.0" label="Size of the nodes" help=""/>
        <param argument="node_size_power" type="float" value="0.5" label="Power with which groups sizes influence the radius of the nodes" help=""/>
        <param argument="edge_width_scale" type="float" value="5" label="Scale for edge width" help=""/>
        <param argument="min_edge_width" type="float" value="" optional="true" label="Min width of solid edges" help=""/>
        <param argument="max_edge_width" type="float" value="" optional="true" label="Max width of solid and dashed edges" help=""/>
        <param argument="arrowsize" type="integer" value="30" label="Arrow size" help="For directed graphs, choose the size of the arrow head head's length and width."/>
        <param argument="pos" type="data" format="tabular,csv,tsv" optional="true" label="Two-column tabular file storing the x and y coordinates for drawing" help=""/>
        <param argument="cmap" type="select" label="Colors to use for plotting categorical annotation groups" help="">
            <expand macro="matplotlib_pyplot_colormap"/>
        </param>
        <expand macro="pl_title"/>
        <expand macro="pl_frameon"/>
        <expand macro="param_plot_format"/>
    </inputs>
    <outputs>
        <expand macro="plot_output"/>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="tl.paga.neighbors.paul15_gauss_braycurtis.h5ad" />
            </conditional>
            <param name="threshold" value="0.01"/>
            <param name="color" value="paul15_clusters"/>
            <repeat name="labels">
                <param name="format" value="label" />
            </repeat>
            <param name="layout" value="fr"/>
            <param name="random_state" value="0"/>
            <param name="solid_edges" value="connectivities"/>
            <param name="single_component" value="False"/>
            <param name="fontsize" value="1"/>
            <param name="node_size_scale" value="1.0"/>
            <param name="node_size_power" value="0.5"/>
            <param name="edge_width_scale" value="5"/>
            <param name="arrowsize" value="30"/>
            <param name="cmap" value="viridis"/>
            <param name="title" value="A title"/>
            <param name="frameon" value="True"/>
            <param name="format" value="png"/>
            <output name="out_png" file="pl.paga.paul15_gauss_braycurtis.png" ftype="png" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[
Plot the abstracted graph through thresholding low-connectivity edges.

This uses ForceAtlas2 or igraph's layout algorithms for most layouts.

Notes
-----

When initializing the positions, note that - for some reason - igraph
mirrors coordinates along the x axis... that is, you should increase the
`maxiter` parameter by 1 if the layout is flipped.


More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pl.paga.html#scanpy.api.pl.paga>`__

    ]]></help>
    <expand macro="citations"/>
</tool>
