<tool id="pl.clustermap" name="pl.clustermap" version="1.3.1+galaxy1">
    <description>Hierarchically-clustered heatmap.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
          python $script_file
      ]]>
    </command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
  import scanpy.api as sc
  sc.settings.figdir = '.'
  @CMD_set_figure_params
  @CMD_read_inputs

  sc.pl.clustermap(
    adata='$adata',
    obs_keys='$obs_keys',
    use_raw='$use_raw',
    show=False,
    save='.$format',
    method='$seaborn_clustermap.method',
    metric='$seaborn_clustermap.metric',
    z_score='$seaborn_clustermap.z_score',
    standard_scale='$seaborn_clustermap.standard_scale',
    col_cluster='$seaborn_clustermap.col_cluster',
    row_cluster='$seaborn_clustermap.row_cluster')
  ]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <param name="obs_keys" type="str" value="" label="Categorical annotation to plot with a different color map" help="Currently, only a single key is supported."/>
        <param name="use_raw" type="bool" truevalue="True" falsevalue="False" checked="true" label="Use `raw` attribute of `adata` if present?" help=""/>
        <param name="format" type="select" label="Format for saving figures">
            <option value="png">png</option>
            <option value="pdf">pdf</option>
            <option value="svg">svg</option>
        </param>
        <section name="seaborn_clustermap" title="Parameters for seaborn.clustermap" expanded="False">
            <param name="method" type="select" label="Linkage method to use for calculating clusters" help="More details in https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html">
                <option value="single">single: Nearest Point Algorithm</option>
                <option value="complete">complete: Farthest Point Algorithm or Voor Hees Algorithm</option>
                <option value="average">average: UPGMA algorithm</option>
                <option value="weighted">weighted: WPGMA algorithm</option>
                <option value="centroid">centroid: UPGMC algorithm</option>
                <option value="median">median: WPGMC algorithm</option>
                <option value="ward">ward: incremental algorithm</option>
            </param>
            <param name="metric" type="select" label="Distance metric to use for the data" help="See scipy.spatial.distance.pdist documentation for more options https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html">
                <expand macros="distance_metric_options"/>
            </param>
            <param name="z_score" type="select" label="Calculate z-scores for the rows or the columns?" help="Z scores are: z = (x - mean)/std, so values in each row (column) will get the mean of the row (column) subtracted, then divided by the standard deviation of the row (column). This ensures that each row (column) has mean of 0 and variance of 1.">
                <option value="None">No Z-score</option>
                <option value="0">Rows</option>
                <option value="1">Columns</option>
            </param>
            <param name="standard_scale" type="select" label="Standardize a dimension?" help="It means for each row or column, subtract the minimum and divide each by its maximum.">
                <option value="None">No standardization</option>
                <option value="0">Rows</option>
                <option value="1">Columns</option>
            </param>
            <param name="col_cluster" type="bool" truevalue="True" falsevalue="False" checked="false" label="Cluster the columns?" help=""/>
            <param name="row_cluster" type="bool" truevalue="True" falsevalue="False" checked="false" label="Cluster the rows?" help=""/>
        </section>
    </inputs>
    <outputs>
        <data name="out_png" format="png" from_work_dir="output.png" label="${tool.name} on ${on_string}: plot">
            <filter>format == 'png'</filter>
        <data>
        <data name="out_pdf" format="pdf" from_work_dir="output.pdf" label="${tool.name} on ${on_string}: plot">
            <filter>format == 'pdf'</filter>
        <data>
        <data name="out_svg" format="svg" from_work_dir="output.svg" label="${tool.name} on ${on_string}: plot">
            <filter>format == 'svg'</filter>
        <data>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="loom" />
                <param name="adata" value="loom" />
                <param name="sparse" value="True"/>
                <param name="cleanup" value="False"/>
                <param name="x_name" value="spliced"/>
                <param name="obs_names" value="CellID"/>
                <param name="var_names" value="Gene"/>
            </conditional>
            <param name="obs_keys" value="cell_type"/>
            <param name="use_raw" value="True"/>
            <section name="seaborn_clustermap">
                <param name="method" value="single"/>
                <param name="metric" value="braycurtis"/>
                <param name="z_score" value="None"/>
                <param name="standard_scale" value="None"/>
                <param name="col_cluster" value="False"/>
                <param name="row_cluster" value="False"/>
            </section>
        </test>
    </tests>
    <help><![CDATA[
Hierarchically-clustered heatmap.

Wraps `seaborn.clustermap
<https://seaborn.pydata.org/generated/seaborn.clustermap.html>`__ for
:class:`~anndata.AnnData`.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
obs_keys : `str`
    Categorical annotation to plot with a different color map.
    Currently, only a single key is supported.
use_raw : `bool`, optional (default: `None`)
    Use `raw` attribute of `adata` if present.
show : `bool`, optional (default: `None`)
    Show the plot, do not return axis.
save : `bool` or `str`, optional (default: `None`)
    If `True` or a `str`, save the figure. A string is appended to the default
    filename. Infer the filetype if ending on {'.pdf', '.png', '.svg'}.
ax : `matplotlib.Axes`, optional (default: `None`)
    A matplotlib axes object. Only works if plotting a single component.
**kwds : keyword arguments
    Keyword arguments passed to `seaborn.clustermap
    <https://seaborn.pydata.org/generated/seaborn.clustermap.html>`__.

Returns
-------
If `show == False`, a `seaborn.ClusterGrid` object.

Notes
-----
The returned object has a savefig() method that should be used if you want
to save the figure object without clipping the dendrograms.

To access the reordered row indices, use:
clustergrid.dendrogram_row.reordered_ind

Column indices, use: clustergrid.dendrogram_col.reordered_ind

Examples
--------
Soon to come with figures. In the meanwile, see
https://seaborn.pydata.org/generated/seaborn.clustermap.html.

>>> import scanpy.api as sc
>>> adata = sc.datasets.krumsiek11()
>>> sc.pl.clustermap(adata, obs_keys='cell_type')
]]>
    </help>
    <expand macro="citations"/>
</tool>
