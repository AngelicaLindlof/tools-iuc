<tool id="tl.diffmap" name="tl.diffmap" version="1.3.1+galaxy1">
  <description>Diffusion Maps [Coifman05]_ [Haghverdi15]_ [Wolf17]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.diffmap(
   adata = '$adata',
   n_comps = '$n_comps',
   copy = '$copy',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="n_comps" type="int" value="" optional="true" label="n_comps" help="    The number of dimensions of the representation."/>
    <param name="copy" type="bool" value="False" label="copy" help="    Return a copy instead of writing to adata."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="X_diffmap" type="adata.obsm" label="${tool.name} on ${on_string}: X_diffmap"/>
    <data name="diffmap_evals" type="np.ndarray" label="${tool.name} on ${on_string}: diffmap_evals"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="n_comps" value=""/>
      <param name="copy" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="X_diffmap" file=""/>
      <output name="diffmap_evals" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Diffusion Maps [Coifman05]_ [Haghverdi15]_ [Wolf17]_.

Diffusion maps [Coifman05]_ has been proposed for visualizing single-cell
data by [Haghverdi15]_. The tool uses the adapted Gaussian kernel suggested
by [Haghverdi16]_ in the implementation of [Wolf17]_.

The width ("sigma") of the connectivity kernel is implicitly determined by
the number of neighbors used to compute the single-cell graph in
:func:`~scanpy.api.neighbors`. To reproduce the original implementation
using a Gaussian kernel, use `method=='gauss'` in
:func:`~scanpy.api.neighbors`. To use an exponential kernel, use the default
`method=='umap'`. Differences between these options shouldn't usually be
dramatic.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
n_comps : `int`, optional (default: 15)
    The number of dimensions of the representation.
copy : `bool` (default: `False`)
    Return a copy instead of writing to adata.

Returns
-------
Depending on `copy`, returns or updates `adata` with the following fields.

X_diffmap : `adata.obsm`
    Diffusion map representation of data, which is the right eigen basis of
    the transition matrix with eigenvectors as columns.
diffmap_evals : `np.ndarray` (`adata.uns`)
    Array of size (number of eigen vectors). Eigenvalues of transition matrix.
    ]]></help>
  <expand macro="citations"/>
</tool>
