<tool id="pl.paga" name="pl.paga" version="1.3.1+galaxy1">
  <description>Plot the abstracted graph through thresholding low-connectivity edges.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc
@CMD_set_figure_params
@CMD_read_inputs

sc.pl.paga(
   adata = '$adata',
   threshold = '$threshold',
   color = '$color',
   labels = '$labels',
   layout = '$layout',
   init_pos = '$init_pos',
   random_state = '$random_state',
   root = '$root',
   transitions = '$transitions',
   solid_edges = '$solid_edges',
   dashed_edges = '$dashed_edges',
   single_component = '$single_component',
   fontsize = '$fontsize',
   text_kwds = '$text_kwds',
   node_size_scale = '$node_size_scale',
   node_size_power = '$node_size_power',
   edge_width_scale = '$edge_width_scale',
   min_edge_width = '$min_edge_width',
   max_edge_width = '$max_edge_width',
   arrowsize = '$arrowsize',
   pos = '$pos',
   export_to_gexf = '$export_to_gexf',
   cmap = '$cmap',
   cax = '$cax',
   cb_kwds = '$cb_kwds',
   add_pos = '$add_pos',
   title = '$title',
   frameon = '$frameon',
   show = '$show',
   save = '$save',
   ax = '$ax',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="threshold" type="float" value="" optional="true" label="threshold" help="    Do not draw edges for weights below this threshold. Set to 0 if you want    all edges. Discarding low-connectivity edges helps in getting a much    clearer picture of the graph."/>
    <param name="color" type="data" format="gene name or obs. annotation" value="None" optional="true" label="color" help="    The node colors. Also plots the degree of the abstracted graph when    passing {'degree_dashed', 'degree_solid'}."/>
    <param name="labels" type="None" value="None" optional="true" label="labels" help="    The node labels. If `None`, this defaults to the group labels stored in    the categorical for which :func:`~scanpy.api.tl.paga` has been computed."/>
    <param name="layout" type="data" format="{'fa'" value="" optional="true" label="layout" help="    Plotting layout. 'fa' stands for ForceAtlas2, 'fr' stands for    Fruchterman-Reingold, 'rt' stands for Reingold Tilford. 'eq_tree' stands    for 'eqally spaced tree'. All but 'fa' and 'eq_tree' are igraph    layouts. All other igraph layouts are also permitted. See also parameter    `pos` and :func:`~scanpy.api.tl.draw_graph`."/>
    <param name="init_pos" type="np.ndarray" value="None" optional="true" label="init_pos" help="    Two-column array storing the x and y coordinates for initializing the    layout."/>
    <param name="random_state" type="int" value="" optional="true" label="random_state" help="    For layouts with random initialization like 'fr', change this to use    different intial states for the optimization. If `None`, the initial    state is not reproducible."/>
    <param name="root" type="int" value="" optional="true" label="root" help="    If choosing a tree layout, this is the index of the root node or a list    of root node indices. If this is a non-empty vector then the supplied    node IDs are used as the roots of the trees (or a single tree if the    graph is connected). If this is `None` or an empty list, the root    vertices are automatically calculated based on topological sorting."/>
    <param name="transitions" type="str" value="None" optional="true" label="transitions" help="    Key for `.uns['paga']` that specifies the matrix that - for instance    `'transistions_confidence'` - that specifies the matrix that stores the    arrows."/>
    <param name="solid_edges" type="str" value="" optional="true" label="solid_edges" help="    Key for `.uns['paga']` that specifies the matrix that stores the edges    to be drawn solid black."/>
    <param name="dashed_edges" type="str" value="None" optional="true" label="dashed_edges" help="    Key for `.uns['paga']` that specifies the matrix that stores the edges    to be drawn dashed grey. If `None`, no dashed edges are drawn."/>
    <param name="single_component" type="bool" value="False" optional="true" label="single_component" help="    Restrict to largest connected component."/>
    <param name="fontsize" type="int" value="None" label="fontsize" help="    Font size for node labels."/>
    <param name="text_kwds" type="data" format="keywords for `matplotlib.text`" value="" label="text_kwds" help="    See `here    &lt;https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.text.html#matplotlib.axes.Axes.text&gt;`_."/>
    <param name="node_size_scale" type="float" value="" label="node_size_scale" help="    Increase or decrease the size of the nodes."/>
    <param name="node_size_power" type="float" value="" label="node_size_power" help="    The power with which groups sizes influence the radius of the nodes."/>
    <param name="edge_width_scale" type="float" value="" optional="true" label="edge_width_scale" help="    Edge with scale in units of `rcParams['lines.linewidth']`."/>
    <param name="min_edge_width" type="float" value="None" optional="true" label="min_edge_width" help="    Min width of solid edges."/>
    <param name="max_edge_width" type="float" value="None" optional="true" label="max_edge_width" help="    Max width of solid and dashed edges."/>
    <param name="arrowsize" type="int" value="" optional="true" label="arrowsize" help="   For directed graphs, choose the size of the arrow head head's length and   width. See :py:class: `matplotlib.patches.FancyArrowPatch` for attribute   `mutation_scale` for more info."/>
    <param name="pos" type="np.ndarray" value="None" optional="true" label="pos" help="    Two-column array/list storing the x and y coordinates for drawing.    Otherwise, path to a `.gdf` file that has been exported from Gephi or    a similar graph visualization software."/>
    <param name="export_to_gexf" type="bool" value="None" optional="true" label="export_to_gexf" help="    Export to gexf format to be read by graph visualization programs such as    Gephi."/>
    <param name="cmap" type="data" format="color map" value="" label="cmap" help="    The color map."/>
    <param name="cax" type="matplotlib.Axes" value="" label="cax" help="    A matplotlib axes object for a potential colorbar."/>
    <param name="cb_kwds" type="data" format="colorbar keywords" value="" label="cb_kwds" help="    See `here    &lt;https://matplotlib.org/api/colorbar_api.html#matplotlib.colorbar.ColorbarBase&gt;`__,    for instance, `ticks`."/>
    <param name="add_pos" type="bool" value="True" optional="true" label="add_pos" help="    Add the positions to `adata.uns['paga']`."/>
    <param name="title" type="str" value="None" optional="true" label="title" help="     Provide a title."/>
    <param name="frameon" type="bool" value="False" optional="true" label="frameon" help="     Draw a frame around the PAGA graph."/>
    <param name="show" type="bool" value="None" optional="true" label="show" help="     Show the plot, do not return axis."/>
    <param name="save" type="bool" value="None" optional="true" label="save" help="    If `True` or a `str`, save the figure. A string is appended to the    default filename. Infer the filetype if ending on \{'.pdf', '.png', '.svg'\}."/>
    <param name="ax" type="matplotlib.Axes" value="" label="ax" help="     A matplotlib axes object."/>
    <section name="pl_settings" title="Plot settings" expanded="false"><expand macro="inputs_set_figure_params"/></section></inputs>
  <outputs>
    <data name="If `show==False`, one or more `matplotlib.Axis` objects." type="data" format="" label="${tool.name} on ${on_string}: If `show==False`, one or more `matplotlib.Axis` objects."/>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="threshold" value=""/>
      <param name="color" value=""/>
      <param name="labels" value=""/>
      <param name="layout" value=""/>
      <param name="init_pos" value=""/>
      <param name="random_state" value=""/>
      <param name="root" value=""/>
      <param name="transitions" value=""/>
      <param name="solid_edges" value=""/>
      <param name="dashed_edges" value=""/>
      <param name="single_component" value=""/>
      <param name="fontsize" value=""/>
      <param name="text_kwds" value=""/>
      <param name="node_size_scale" value=""/>
      <param name="node_size_power" value=""/>
      <param name="edge_width_scale" value=""/>
      <param name="min_edge_width" value=""/>
      <param name="max_edge_width" value=""/>
      <param name="arrowsize" value=""/>
      <param name="pos" value=""/>
      <param name="export_to_gexf" value=""/>
      <param name="cmap" value=""/>
      <param name="cax" value=""/>
      <param name="cb_kwds" value=""/>
      <param name="add_pos" value=""/>
      <param name="title" value=""/>
      <param name="frameon" value=""/>
      <param name="show" value=""/>
      <param name="save" value=""/>
      <param name="ax" value=""/>
      <expand macro="tests_set_figure_params"/>
      <output name="If `show==False`, one or more `matplotlib.Axis` objects." file=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Plot the abstracted graph through thresholding low-connectivity edges.

This uses ForceAtlas2 or igraph's layout algorithms for most layouts [Csardi06]_.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
threshold : `float` or `None`, optional (default: 0.01)
    Do not draw edges for weights below this threshold. Set to 0 if you want
    all edges. Discarding low-connectivity edges helps in getting a much
    clearer picture of the graph.
color : gene name or obs. annotation, optional (default: `None`)
    The node colors. Also plots the degree of the abstracted graph when
    passing {'degree_dashed', 'degree_solid'}.
labels : `None`, `str`, `list`, `dict`, optional (default: `None`)
    The node labels. If `None`, this defaults to the group labels stored in
    the categorical for which :func:`~scanpy.api.tl.paga` has been computed.
layout : {'fa', 'fr', 'rt', 'rt_circular', 'eq_tree', ...}, optional (default: 'fr')
    Plotting layout. 'fa' stands for ForceAtlas2, 'fr' stands for
    Fruchterman-Reingold, 'rt' stands for Reingold Tilford. 'eq_tree' stands
    for 'eqally spaced tree'. All but 'fa' and 'eq_tree' are igraph
    layouts. All other igraph layouts are also permitted. See also parameter
    `pos` and :func:`~scanpy.api.tl.draw_graph`.
init_pos : `np.ndarray`, optional (default: `None`)
    Two-column array storing the x and y coordinates for initializing the
    layout.
random_state : `int` or `None`, optional (default: 0)
    For layouts with random initialization like 'fr', change this to use
    different intial states for the optimization. If `None`, the initial
    state is not reproducible.
root : `int`, `str` or list of `int`, optional (default: 0)
    If choosing a tree layout, this is the index of the root node or a list
    of root node indices. If this is a non-empty vector then the supplied
    node IDs are used as the roots of the trees (or a single tree if the
    graph is connected). If this is `None` or an empty list, the root
    vertices are automatically calculated based on topological sorting.
transitions : `str` or `None`, optional (default: `None`)
    Key for `.uns['paga']` that specifies the matrix that - for instance
    `'transistions_confidence'` - that specifies the matrix that stores the
    arrows.
solid_edges : `str`, optional (default: 'paga_connectivities')
    Key for `.uns['paga']` that specifies the matrix that stores the edges
    to be drawn solid black.
dashed_edges : `str` or `None`, optional (default: `None`)
    Key for `.uns['paga']` that specifies the matrix that stores the edges
    to be drawn dashed grey. If `None`, no dashed edges are drawn.
single_component : `bool`, optional (default: `False`)
    Restrict to largest connected component.
fontsize : `int` (default: `None`)
    Font size for node labels.
text_kwds : keywords for `matplotlib.text`
    See `here
    <https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.text.html#matplotlib.axes.Axes.text>`_.
node_size_scale : `float` (default: 1.0)
    Increase or decrease the size of the nodes.
node_size_power : `float` (default: 0.5)
    The power with which groups sizes influence the radius of the nodes.
edge_width_scale : `float`, optional (default: 5)
    Edge with scale in units of `rcParams['lines.linewidth']`.
min_edge_width : `float`, optional (default: `None`)
    Min width of solid edges.
max_edge_width : `float`, optional (default: `None`)
    Max width of solid and dashed edges.
arrowsize : `int`, optional (default: 30)
   For directed graphs, choose the size of the arrow head head's length and
   width. See :py:class: `matplotlib.patches.FancyArrowPatch` for attribute
   `mutation_scale` for more info.
pos : `np.ndarray`, filename of `.gdf` file,  optional (default: `None`)
    Two-column array/list storing the x and y coordinates for drawing.
    Otherwise, path to a `.gdf` file that has been exported from Gephi or
    a similar graph visualization software.
export_to_gexf : `bool`, optional (default: `None`)
    Export to gexf format to be read by graph visualization programs such as
    Gephi.
cmap : color map
    The color map.
cax : `matplotlib.Axes`
    A matplotlib axes object for a potential colorbar.
cb_kwds : colorbar keywords
    See `here
    <https://matplotlib.org/api/colorbar_api.html#matplotlib.colorbar.ColorbarBase>`__,
    for instance, `ticks`.
add_pos : `bool`, optional (default: `True`)
    Add the positions to `adata.uns['paga']`.
title : `str`, optional (default: `None`)
     Provide a title.
frameon : `bool`, optional (default: `False`)
     Draw a frame around the PAGA graph.
show : `bool`, optional (default: `None`)
     Show the plot, do not return axis.
save : `bool` or `str`, optional (default: `None`)
    If `True` or a `str`, save the figure. A string is appended to the
    default filename. Infer the filetype if ending on \{'.pdf', '.png', '.svg'\}.
ax : `matplotlib.Axes`
     A matplotlib axes object.

Returns
-------
If `show==False`, one or more `matplotlib.Axis` objects.

Adds `'pos'` to `adata.uns['paga']` if `add_pos` is `True`.

Notes
-----

When initializing the positions, note that - for some reason - igraph
mirrors coordinates along the x axis... that is, you should increase the
`maxiter` parameter by 1 if the layout is flipped.

See also
--------
tl.paga
pl.paga_compare
pl.paga_path
    ]]></help>
  <expand macro="citations"/>
</tool>
