<tool id="pp.filter_genes_dispersion" name="pp.filter_genes_dispersion" version="1.3.1+galaxy1">
    <description>Extract highly variable genes</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
    python $script_file
    ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

res = sc.pp.filter_genes_dispersion(
    #if $modify_anndata.modify_anndata == 'true'
    adata,
    #else
    adata.X,
    #end if
    flavor='$flavor.flavor',
    #if $flavor.flavor=='seurat'
    min_mean=$flavor.min_mean,
    max_mean=$flavor.max_mean,
    min_disp=$flavor.min_disp,
        #if $flavor.max_disp
    max_disp=$flavor.max_disp,
        #end if
    #else
    n_top_genes=$flavor.n_top_genes,
    #end if
    n_bins=$n_bins,
    log=$log,
    copy=False)

@CMD_anndata_write_modify_outputs@

#if $modify_anndata.modify_anndata == 'true'
adata.var.to_csv('$per_gene', sep='\t')
#else
pd.DataFrame(res).to_csv('$per_gene', sep='\t')
#end if
    ]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <conditional name='flavor'>
            <param argument="flavor" type="select" label="Flavor for computing normalized dispersion" help="">
                <option value="seurat">seurat: expects non-logarithmized data</option>
                <option value="cell_ranger">cell_ranger: usually called for logarithmized data</option>
            </param>
            <when value="seurat">
                <param argument="min_mean" type="float" value="0.0125" label="Minimal mean cutoff" help=""/>
                <param argument="max_mean" type="float" value="3" label="Maximal mean cutoff" help=""/>
                <param argument="min_disp" type="float" value="0.5" label="Minimal normalized dispersion cutoff" help=""/>
                <param argument="max_disp" type="float" value="" optional="true" label="Maximal normalized dispersion cutoff" help=""/>
            </when>
            <when value="cell_ranger">
                <param argument="n_top_genes" type="integer" value="" label="Number of highly-variable genes to keep" help=""/>
            </when>
        </conditional>
        <param argument="n_bins" type="integer" value="20" label="Number of bins for binning the mean gene expression" help="Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1"/>
        <param argument="log" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Use the logarithm of the mean to variance ratio?" help=""/>
        <expand macro="anndata_modify_output_input"/>
    </inputs>
    <outputs>
        <expand macro="anndata_modify_outputs"/>
        <data name="per_gene" format="tabular" label="${tool.name} on ${on_string}: Means, dispersions and normalized dispersions per gene"/>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <conditional name="flavor">
                <param name="flavor" value="seurat"/>
                <param name="min_mean" value="0.0125"/>
                <param name="max_mean" value="3"/>
                <param name="min_disp" value="0.5"/>
            </conditional>
            <param name="n_bins" value="20" />
            <param name="log" value="true"/>
            <conditional name="modify_anndata">
                <param name="modify_anndata" value="true"/>
                <param name="anndata_output_format" value="h5ad" />
            </conditional>
            <output name="anndata_out_h5ad" file="pp.filter_genes_dispersion.krumsiek11-seurat.h5ad" ftype="h5" compare="sim_size"/>
            <output name="per_gene" file="pp.filter_genes_dispersion.per_gene.krumsiek11-seurat.tabular"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <conditional name="flavor">
                <param name="flavor" value="cell_ranger"/>
                <param name="n_top_genes" value="2"/>
            </conditional>
            <param name="n_bins" value="20"/>
            <param name="log" value="true"/>
            <conditional name="modify_anndata">
                <param name="modify_anndata" value="false"/>
            </conditional>
            <output name="per_gene" file="pp.filter_genes_dispersion.per_gene.krumsiek11-cell_ranger.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
        Extract highly variable genes [Satija15]_ [Zheng17]_.

If trying out parameters, pass the data matrix instead of AnnData.

Depending on `flavor`, this reproduces the R-implementations of Seurat
[Satija15]_ and Cell Ranger [Zheng17]_.

The normalized dispersion is obtained by scaling with the mean and standard
deviation of the dispersions for genes falling into a given bin for mean
expression of genes. This means that for each bin of mean expression, highly
variable genes are selected.

Use `flavor='cell_ranger'` with care and in the same way as in
:func:`~scanpy.api.pp.recipe_zheng17`.

Returns
-------
- The annotated matrix filtered, with the annotations
- A table with the means, dispersions, and normalized dispersions per gene, logarithmized when `log` is `True`.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.api.pp.filter_genes_dispersion.html#scanpy.api.pp.filter_genes_dispersion>`__
    
    ]]></help>
    <expand macro="citations"/>
</tool>
