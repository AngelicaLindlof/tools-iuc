<tool id="tl.rank_genes_groups" name="tl.rank_genes_groups" version="1.3.1+galaxy1">
  <description>Rank genes for characterizing groups.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.rank_genes_groups(
   adata = '$adata',
   groupby = '$groupby',
   use_raw = '$use_raw',
   groups = '$groups',
   reference = '$reference',
   n_genes = '$n_genes',
   method = '$method',
   only_positive = '$only_positive',
   **kwds = '$**kwds',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="groupby" type="str" value="" label="groupby" help="    The key of the observations grouping to consider."/>
    <param name="use_raw" type="bool" value="True" optional="true" label="use_raw" help="    Use `raw` attribute of `adata` if present."/>
    <param name="groups" type="str" value="'all'" optional="true" label="groups" help="    Subset of groups, e.g. `['g1', 'g2', 'g3']`, to which comparison shall    be restricted. If not passed, a ranking will be generated for all    groups."/>
    <param name="reference" type="str" value="'rest'" optional="true" label="reference" help="    If `'rest'`, compare each group to the union of the rest of the group.  If    a group identifier, compare with respect to this group."/>
    <param name="n_genes" type="int" value="" optional="true" label="n_genes" help="    The number of genes that appear in the returned tables."/>
    <param name="method" type="data" format="{'logreg'" value="" optional="true" label="method" help="    If 't-test', uses t-test, if 'wilcoxon', uses Wilcoxon-Rank-Sum. If    't-test_overestim_var', overestimates variance of each group. If    'logreg' uses logistic regression, see [Ntranos18]_, `here    &lt;https://github.com/theislab/scanpy/issues/95&gt;`__ and `here    &lt;http://www.nxn.se/valent/2018/3/5/actionable-scrna-seq-clusters&gt;`__, for    why this is meaningful."/>
    <param name="only_positive" type="data" format="bool" value="True" optional="true" label="only_positive" help="    Only consider positive differences."/>
    <param name="**kwds" type="data" format="keyword parameters" value="" label="**kwds" help="    Are passed to test methods. Currently this affects only parameters that    are passed to `sklearn.linear_model.LogisticRegression    &lt;http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html&gt;`__.    For instance, you can pass `penalty='l1'` to try to come up with a    minimal set of genes that are good predictors (sparse solution meaning    few non-zero fitted coefficients)."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="names" type="data" format="structured `np.ndarray` " label="${tool.name} on ${on_string}: names"/>
    <data name="scores" type="data" format="structured `np.ndarray` " label="${tool.name} on ${on_string}: scores"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="groupby" value=""/>
      <param name="use_raw" value=""/>
      <param name="groups" value=""/>
      <param name="reference" value=""/>
      <param name="n_genes" value=""/>
      <param name="method" value=""/>
      <param name="only_positive" value=""/>
      <param name="**kwds" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="names" file=""/>
      <output name="scores" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Rank genes for characterizing groups.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
groupby : `str`
    The key of the observations grouping to consider.
use_raw : `bool`, optional (default: `True`)
    Use `raw` attribute of `adata` if present.
groups : `str`, `list`, optional (default: `'all'`)
    Subset of groups, e.g. `['g1', 'g2', 'g3']`, to which comparison shall
    be restricted. If not passed, a ranking will be generated for all
    groups.
reference : `str`, optional (default: `'rest'`)
    If `'rest'`, compare each group to the union of the rest of the group.  If
    a group identifier, compare with respect to this group.
n_genes : `int`, optional (default: 100)
    The number of genes that appear in the returned tables.
method : {'logreg', 't-test', 'wilcoxon', 't-test_overestim_var'}, optional (default: 't-test_overestim_var')
    If 't-test', uses t-test, if 'wilcoxon', uses Wilcoxon-Rank-Sum. If
    't-test_overestim_var', overestimates variance of each group. If
    'logreg' uses logistic regression, see [Ntranos18]_, `here
    <https://github.com/theislab/scanpy/issues/95>`__ and `here
    <http://www.nxn.se/valent/2018/3/5/actionable-scrna-seq-clusters>`__, for
    why this is meaningful.
only_positive : bool, optional (default: `True`)
    Only consider positive differences.
**kwds : keyword parameters
    Are passed to test methods. Currently this affects only parameters that
    are passed to `sklearn.linear_model.LogisticRegression
    <http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html>`__.
    For instance, you can pass `penalty='l1'` to try to come up with a
    minimal set of genes that are good predictors (sparse solution meaning
    few non-zero fitted coefficients).

Returns
-------
Updates `adata` with the following fields.
names : structured `np.ndarray` (`.uns['rank_genes_groups']`)
    Structured array to be indexed by group id storing the gene
    names. Ordered according to scores.
scores : structured `np.ndarray` (`.uns['rank_genes_groups']`)
    Structured array to be indexed by group id storing the score for each
    gene for each group. Ordered according to scores.
    ]]></help>
  <expand macro="citations"/>
</tool>
