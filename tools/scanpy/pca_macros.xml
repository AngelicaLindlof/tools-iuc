<macros>
    <xml name="svd_solver">
        <param name="svd_solver" type="select" label="SVD solver to use" help="">
            <option value="auto">Automatically chosen depending on the size of the problem</option>
            <option value="arpack">ARPACK wrapper in SciPy</option>
            <option value="randomized">Randomized algorithm due to Halko (2009)</option>
        </param>
    </xml>
    <xml name="pca_random_state">
        <param name="random_state" type="integer" value="0" label="Initial states for the optimization" help=""/>
    </xml>
    <xml name="pca_inputs">
        <expand macro="inputs_anndata"/>
        <param name="n_comps" type="integer" value="50" label="Number of principal components to compute" help=""/>
        <param name="dtype" type="text" value="float32" label="Numpy data type string to which to convert the result" help=""/>
        <conditional name="pca">
            <param name="chunked" type="select" label="Type of PCA?">
                <option value="True">Incremental PCA on segments (incremental PCA automatically zero centers and ignores settings of `random_seed` and `svd_solver`)</option>
                <option value="False" selected="true">Full PCA</option>
            </param>
            <when value="True">
                <param name="chunk_size" type="integer" value="" label="chunk_size" help="Number of observations to include in each chunk"/>
            </when>
            <when value="False">
                <param name="zero_center" type="boolean" truevalue="True" falsevalue="False" checked="true" label="Compute standard PCA from covariance matrix?" help="If not, it omits zero-centering variables (uses *TruncatedSVD* from scikit-learn), which allows to handle sparse input efficiently."/>
                <expand macro="svd_solver"/> 
                <param name="random_state" type="integer" value="0" label="Initial states for the optimization" help=""/>
            </when>
        </conditional>
        <expand macro="anndata_output_format"/> 
    </xml>
    <xml name="pca_outputs">
        <expand macro="anndata_outputs"/>
        <data name="X_pca" format="tabular" label="${tool.name} on ${on_string}: PCA representation of data"/>
        <data name="PCs" format="tabular" label="${tool.name} on ${on_string}: Principal components containing the loadings"/>
        <data name="variance_ratio" format="tabular" label="${tool.name} on ${on_string}: Ratio of explained variance"/>
        <data name="variance" format="tabular" label="${tool.name} on ${on_string}: Explained variance, equivalent to the eigenvalues of the covariance matrix"/>
    </xml>
    <xml name="pca_tests">
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="n_comps" value="50"/>
            <param name="dtype" value="float32"/>
            <conditional name="pca">
                <param name="chunked" value="False"/>
                <param name="zero_center" value="True"/>
                <param name="svd_solver" value="auto"/>
                <param name="random_state" value="0"/>
            </conditional>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="pp.pca.krumsiek11.h5ad" ftype="h5" compare="sim_size"/>
            <output name="X_pca" file="pp.pca.X_pca.krumsiek11.tabular" />
            <output name="PCs" file="pp.pca.PCs.krumsiek11.tabular" />
            <output name="variance_ratio" file="pp.pca.variance_ratio.krumsiek11.tabular" />
            <output name="variance" file="pp.pca.variance.krumsiek11.tabular" />
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="krumsiek11.h5ad" />
            </conditional>
            <param name="n_comps" value="50"/>
            <param name="dtype" value="float32"/>
            <conditional name="pca">
                <param name="chunked" value="True"/>
                <param name="chunk_size" value="50"/>
            </conditional>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="pp.pca.krumsiek11_chunk.h5ad" ftype="h5" compare="sim_size"/>
            <output name="X_pca" file="pp.pca.X_pca.krumsiek11_chunk.tabular" />
            <output name="PCs" file="pp.pca.PCs.krumsiek11_chunk.tabular" />
            <output name="variance_ratio" file="pp.pca.variance_ratio.krumsiek11_chunk.tabular" />
            <output name="variance" file="pp.pca.variance.krumsiek11_chunk.tabular" />
        </test>
    </xml>
    <token name="@CMD_pca_outputs@"><![CDATA[
@CMD_write_outputs@
np.savetxt('$X_pca', adata.obsm['X_pca'], delimiter='\t')
np.savetxt('$PCs', adata.varm['PCs'], delimiter='\t')
np.savetxt('$variance', adata.uns['pca']['variance'], delimiter='\t')
np.savetxt('$variance_ratio', adata.uns['pca']['variance_ratio'], delimiter='\t')
]]>
    </token>
    <token name="@CMD_pca_params@"><![CDATA[
    data=adata,
    n_comps=$n_comps,
    dtype='$dtype',
    copy=False,
    chunked=$pca.chunked,
#if $pca.chunked == 'True'
    chunk_size=$pca.chunk_size
#else
    zero_center='$pca.zero_center',
    svd_solver='$pca.svd_solver',
    random_state=$pca.random_state
#end if
]]>
    </token>
</macros>