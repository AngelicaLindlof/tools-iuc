<tool id="tl.umap" name="tl.umap" version="1.3.1+galaxy1">
  <description>Embed the neighborhood graph using UMAP [McInnes18]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.umap(
   adata = '$adata',
   min_dist = '$min_dist',
   spread = '$spread',
   n_components = '$n_components',
   maxiter = '$maxiter',
   alpha = '$alpha',
   gamma = '$gamma',
   negative_sample_rate = '$negative_sample_rate',
   init_pos = '$init_pos',
   random_state = '$random_state',
   a = '$a',
   b = '$b',
   copy = '$copy',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="min_dist" type="float" value="" optional="true" label="min_dist" help="    The effective minimum distance between embedded points. Smaller values    will result in a more clustered/clumped embedding where nearby points on    the manifold are drawn closer together, while larger values will result    on a more even dispersal of points. The value should be set relative to    the ``spread`` value, which determines the scale at which embedded    points will be spread out. The default of in the `umap-learn` package is    0.1."/>
    <param name="spread" type="float" value="" optional="true" label="spread" help="    The effective scale of embedded points. In combination with `min_dist`    this determines how clustered/clumped the embedded points are."/>
    <param name="n_components" type="int" value="" optional="true" label="n_components" help="    The number of dimensions of the embedding."/>
    <param name="maxiter" type="int" value="None" optional="true" label="maxiter" help="    The number of iterations (epochs) of the optimization. Called `n_epochs`    in the original UMAP."/>
    <param name="alpha" type="float" value="" optional="true" label="alpha" help="    The initial learning rate for the embedding optimization."/>
    <param name="gamma" type="float" value="" optional="true" label="gamma" help="    Weighting applied to negative samples in low dimensional embedding    optimization. Values higher than one will result in greater weight    being given to negative samples."/>
    <param name="negative_sample_rate" type="int" value="" optional="true" label="negative_sample_rate" help="    The number of negative edge/1-simplex samples to use per positive    edge/1-simplex sample in optimizing the low dimensional embedding."/>
    <param name="init_pos" type="string" value="" optional="true" label="init_pos" help="    How to initialize the low dimensional embedding. Called `init` in the    original UMAP.    Options are:        * Any key for `adata.obsm`.        * 'paga': positions from :func:`~scanpy.api.pl.paga`.        * 'spectral': use a spectral embedding of the graph.        * 'random': assign initial embedding positions at random.        * A numpy array of initial embedding positions."/>
    <param name="random_state" type="int" value="" optional="true" label="random_state" help="    If `int`, `random_state` is the seed used by the random number generator;    If `RandomState`, `random_state` is the random number generator;    If `None`, the random number generator is the `RandomState` instance used    by `np.random`."/>
    <param name="a" type="float" value="" optional="true" label="a" help="    More specific parameters controlling the embedding. If `None` these    values are set automatically as determined by `min_dist` and    `spread`."/>
    <param name="b" type="float" value="" optional="true" label="b" help="    More specific parameters controlling the embedding. If `None` these    values are set automatically as determined by `min_dist` and    `spread`."/>
    <param name="copy" type="bool" value="False" label="copy" help="    Return a copy instead of writing to adata."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="X_umap" type="adata.obsm" label="${tool.name} on ${on_string}: X_umap"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="min_dist" value=""/>
      <param name="spread" value=""/>
      <param name="n_components" value=""/>
      <param name="maxiter" value=""/>
      <param name="alpha" value=""/>
      <param name="gamma" value=""/>
      <param name="negative_sample_rate" value=""/>
      <param name="init_pos" value=""/>
      <param name="random_state" value=""/>
      <param name="a" value=""/>
      <param name="b" value=""/>
      <param name="copy" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="X_umap" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Embed the neighborhood graph using UMAP [McInnes18]_.

UMAP (Uniform Manifold Approximation and Projection) is a manifold learning
technique suitable for visualizing high-dimensional data. Besides tending to
be faster than tSNE, it optimizes the embedding such that it best reflects
the topology of the data, which we represent throughout Scanpy using a
neighborhood graph. tSNE, by contrast, optimizes the distribution of
nearest-neighbor distances in the embedding such that these best match the
distribution of distances in the high-dimensional space.  We use the
implementation of `umap-learn <https://github.com/lmcinnes/umap>`__
[McInnes18]_. For a few comparisons of UMAP with tSNE, see this `preprint
<https://doi.org/10.1101/298430>`__.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
min_dist : `float`, optional (default: 0.5)
    The effective minimum distance between embedded points. Smaller values
    will result in a more clustered/clumped embedding where nearby points on
    the manifold are drawn closer together, while larger values will result
    on a more even dispersal of points. The value should be set relative to
    the ``spread`` value, which determines the scale at which embedded
    points will be spread out. The default of in the `umap-learn` package is
    0.1.
spread : `float` (optional, default 1.0)
    The effective scale of embedded points. In combination with `min_dist`
    this determines how clustered/clumped the embedded points are.
n_components : `int`, optional (default: 2)
    The number of dimensions of the embedding.
maxiter : `int`, optional (default: `None`)
    The number of iterations (epochs) of the optimization. Called `n_epochs`
    in the original UMAP.
alpha : `float`, optional (default: 1.0)
    The initial learning rate for the embedding optimization.
gamma : `float` (optional, default 1.0)
    Weighting applied to negative samples in low dimensional embedding
    optimization. Values higher than one will result in greater weight
    being given to negative samples.
negative_sample_rate : `int` (optional, default 5)
    The number of negative edge/1-simplex samples to use per positive
    edge/1-simplex sample in optimizing the low dimensional embedding.
init_pos : `string` or `np.array`, optional (default: 'spectral')
    How to initialize the low dimensional embedding. Called `init` in the
    original UMAP.
    Options are:
        * Any key for `adata.obsm`.
        * 'paga': positions from :func:`~scanpy.api.pl.paga`.
        * 'spectral': use a spectral embedding of the graph.
        * 'random': assign initial embedding positions at random.
        * A numpy array of initial embedding positions.
random_state : `int`, `RandomState` or `None`, optional (default: 0)
    If `int`, `random_state` is the seed used by the random number generator;
    If `RandomState`, `random_state` is the random number generator;
    If `None`, the random number generator is the `RandomState` instance used
    by `np.random`.
a : `float` (optional, default `None`)
    More specific parameters controlling the embedding. If `None` these
    values are set automatically as determined by `min_dist` and
    `spread`.
b : `float` (optional, default `None`)
    More specific parameters controlling the embedding. If `None` these
    values are set automatically as determined by `min_dist` and
    `spread`.
copy : `bool` (default: `False`)
    Return a copy instead of writing to adata.

Returns
-------
Depending on `copy`, returns or updates `adata` with the following fields.

X_umap : `adata.obsm`
    UMAP coordinates of data.
    ]]></help>
  <expand macro="citations"/>
</tool>
