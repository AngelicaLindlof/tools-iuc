<tool id="tl.paga" name="tl.paga" version="1.3.1+galaxy1">
  <description>Generate cellular maps of differentiation manifolds with complex</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.paga(
   adata = '$adata',
   groups = '$groups',
   use_rna_velocity = '$use_rna_velocity',
   model = '$model',
   copy = '$copy',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="groups" type="data" format="key for categorical in `adata.obs`" value="" optional="true" label="groups" help="    You can pass your predefined groups by choosing any categorical    annotation of observations (`adata.obs`)."/>
    <param name="use_rna_velocity" type="bool" value="False" label="use_rna_velocity" help="    Use RNA velocity to orient edges in the abstracted graph and estimate    transitions. Requires that `adata.uns` contains a directed single-cell    graph with key `['velocyto_transitions']`. This feature might be subject    to change in the future."/>
    <param name="model" type="data" format="{{'v1.2'" value="" optional="true" label="model" help="    The PAGA connectivity model."/>
    <param name="copy" type="bool" value="False" optional="true" label="copy" help="    Copy `adata` before computation and return a copy. Otherwise, perform    computation inplace and return `None`."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="connectivities" type="data" format="np.ndarray " label="${tool.name} on ${on_string}: connectivities"/>
    <data name="connectivities_tree" type="data" format="sc.sparse csr matrix " label="${tool.name} on ${on_string}: connectivities_tree"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="groups" value=""/>
      <param name="use_rna_velocity" value=""/>
      <param name="model" value=""/>
      <param name="copy" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="connectivities" file=""/>
      <output name="connectivities_tree" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Generate cellular maps of differentiation manifolds with complex
topologies [Wolf17i]_.

By quantifying the connectivity of partitions (groups, clusters) of the
single-cell graph, partition-based graph abstraction (PAGA) generates a much
simpler abstracted graph (*PAGA graph*) of partitions, in which edge weights
represent confidence in the presence of connections. By tresholding this
confidence in :func:`scanpy.api.paga`, a much simpler representation of data
can be obtained.

The confidence can be interpreted as the ratio of the actual versus the
expected value of connetions under the null model of randomly connecting
partitions. We do not provide a p-value as this null model does not
precisely capture what one would consider "connected" in real data, hence it
strongly overestimates the expected value. See an extensive discussion of
this in [Wolf17i]_.

Parameters
----------
adata : :class:`~anndata.AnnData`
    An annotated data matrix.
groups : key for categorical in `adata.obs`, optional (default: 'louvain')
    You can pass your predefined groups by choosing any categorical
    annotation of observations (`adata.obs`).
use_rna_velocity : `bool` (default: `False`)
    Use RNA velocity to orient edges in the abstracted graph and estimate
    transitions. Requires that `adata.uns` contains a directed single-cell
    graph with key `['velocyto_transitions']`. This feature might be subject
    to change in the future.
model : {{'v1.2', 'v1.0'}}, optional (default: 'v1.2')
    The PAGA connectivity model.
copy : `bool`, optional (default: `False`)
    Copy `adata` before computation and return a copy. Otherwise, perform
    computation inplace and return `None`.

Returns
-------
Returns or updates `adata` depending on `copy` with
connectivities : np.ndarray (adata.uns['connectivities'])
    The full adjacency matrix of the abstracted graph, weights correspond to
    confidence in the connectivities of partitions.
connectivities_tree : sc.sparse csr matrix (adata.uns['connectivities_tree'])
    The adjacency matrix of the tree-like subgraph that best explains
    the topology.

Notes
-----
Together with a random walk-based distance measure, this generates a partial
coordinatization of data useful for exploring and explaining its variation.

See Also
--------
pl.paga
pl.paga_path
pl.paga_compare
    ]]></help>
  <expand macro="citations"/>
</tool>
