<tool id="pl.dotplot" name="pl.dotplot" version="1.3.1+galaxy1">
  <description>Makes a _dot plot_ of the expression values of `var_names`.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc
@CMD_set_figure_params
@CMD_read_inputs

sc.pl.dotplot(
   adata = '$adata',
   var_names = '$var_names',
   groupby = '$groupby',
   log = '$log',
   use_raw = '$use_raw',
   num_categories = '$num_categories',
   color_map = '$color_map',
   figsize = '$figsize',
   var_group_positions = '$var_group_positions',
   var_group_labels = '$var_group_labels',
   var_group_rotation = '$var_group_rotation',
   show = '$show',
   save = '$save',
   ax = '$ax',
   **kwds = '$**kwds',)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="var_names" type="str" value="" label="var_names" help="    var_names should be a valid subset of  `.var_names`."/>
    <param name="groupby" type="str" value="None" optional="true" label="groupby" help="    The key of the observation grouping to consider. It is expected that groupby is    a categorical. If groupby is not a categorical observation, it would be    subdivided into `num_categories`."/>
    <param name="log" type="bool" value="False" optional="true" label="log" help="    Use the log of the values"/>
    <param name="use_raw" type="bool" value="None" optional="true" label="use_raw" help="    Use `raw` attribute of `adata` if present."/>
    <param name="num_categories" type="int" value="7" optional="true" label="num_categories" help="    Only used if groupby observation is not categorical. This value determines    the number of groups into which the groupby observation should be subdivided."/>
    <param name="color_map" type="str" value="Reds" optional="true" label="color_map" help="    String denoting matplotlib color map."/>
    <param name="figsize" type="data" format="" value="" optional="true" label="figsize" help="    Figure size (width, height. If not set, the figure width is set based on the    number of  `var_names` and the height is set to 10."/>
    <param name="var_group_positions" type="data" format=" list of `tuples`." value="" label="var_group_positions" help="    Use this parameter to highlight groups of `var_names`. This will draw a 'bracket'    on top of the plot between the given start and end positions. If the    parameter `var_group_labels` is set, the corresponding labels is added on    top of the bracket. E.g. var_group_positions = [(4,10)] will add a bracket    between the fourth var_name and the tenth var_name. By giving more    positions, more brackets are drawn."/>
    <param name="var_group_labels" type="data" format="list of `str`" value="" label="var_group_labels" help="    Labels for each of the var_group_positions that want to be highlighted."/>
    <param name="var_group_rotation" type="float" value="None" label="var_group_rotation" help="    Label rotation degrees. By default, labels larger than 4 characters are rotated 90 degrees"/>
    <param name="show" type="bool" value="None" optional="true" label="show" help="     Show the plot, do not return axis."/>
    <param name="save" type="bool" value="None" optional="true" label="save" help="    If `True` or a `str`, save the figure. A string is appended to the default    filename. Infer the filetype if ending on {'.pdf', '.png', '.svg'}."/>
    <param name="ax" type="matplotlib.Axes" value="None" optional="true" label="ax" help="    A matplotlib axes object. Only works if plotting a single component."/>
    <param name="**kwds" type="data" format="keyword arguments" value="" label="**kwds" help="    Are passed to `matplotlib.pyplot.scatter`."/>
    <section name="pl_settings" title="Plot settings" expanded="false"><expand macro="inputs_set_figure_params"/></section></inputs>
  <outputs>
    <data name="A list of `matplotlib.Axes` where the first ax is the groupby categories colorcode, the" type="data" format="" label="${tool.name} on ${on_string}: A list of `matplotlib.Axes` where the first ax is the groupby categories colorcode, the"/>
    <data name="second axis is the heatmap and the third axis is the colorbar." type="data" format="" label="${tool.name} on ${on_string}: second axis is the heatmap and the third axis is the colorbar."/>
    </outputs>
  <tests>
    <test>
      <param name="var_names" value=""/>
      <param name="groupby" value=""/>
      <param name="log" value=""/>
      <param name="use_raw" value=""/>
      <param name="num_categories" value=""/>
      <param name="color_map" value=""/>
      <param name="figsize" value=""/>
      <param name="var_group_positions" value=""/>
      <param name="var_group_labels" value=""/>
      <param name="var_group_rotation" value=""/>
      <param name="show" value=""/>
      <param name="save" value=""/>
      <param name="ax" value=""/>
      <param name="**kwds" value=""/>
      <expand macro="tests_set_figure_params"/>
      <output name="A list of `matplotlib.Axes` where the first ax is the groupby categories colorcode, the" file=""/>
      <output name="second axis is the heatmap and the third axis is the colorbar." file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Makes a _dot plot_ of the expression values of `var_names`.

For each var_name and each `groupby` category a dot is plotted. Each dot
represents two values: mean expression within each category (visualized by
color) and fraction of cells expressing the var_name in the
category. (visualized by the size of the dot).  If groupby is not given, the
dotplot assumes that all data belongs to a single category. A gene is not
considered expressed if the expression value in the adata (or adata.raw) is
equal to zero.

For instance, for each marker gene, the mean value and the percentage of cells
expressing the gene can be visualized for each cluster.

Parameters
----------
adata : :class:`~scanpy.api.AnnData`
    Annotated data matrix.
var_names : `str` or list of `str`
    var_names should be a valid subset of  `.var_names`.
groupby : `str` or `None`, optional (default: `None`)
    The key of the observation grouping to consider. It is expected that groupby is
    a categorical. If groupby is not a categorical observation, it would be
    subdivided into `num_categories`.
log : `bool`, optional (default: `False`)
    Use the log of the values
use_raw : `bool`, optional (default: `None`)
    Use `raw` attribute of `adata` if present.
num_categories : `int`, optional (default: `7`)
    Only used if groupby observation is not categorical. This value determines
    the number of groups into which the groupby observation should be subdivided.
color_map : `str`, optional (default: `Reds`)
    String denoting matplotlib color map.
figsize : (float, float), optional (default: None)
    Figure size (width, height. If not set, the figure width is set based on the
    number of  `var_names` and the height is set to 10.
var_group_positions :  list of `tuples`.
    Use this parameter to highlight groups of `var_names`. This will draw a 'bracket'
    on top of the plot between the given start and end positions. If the
    parameter `var_group_labels` is set, the corresponding labels is added on
    top of the bracket. E.g. var_group_positions = [(4,10)] will add a bracket
    between the fourth var_name and the tenth var_name. By giving more
    positions, more brackets are drawn.
var_group_labels : list of `str`
    Labels for each of the var_group_positions that want to be highlighted.
var_group_rotation : `float` (default: `None`)
    Label rotation degrees. By default, labels larger than 4 characters are rotated 90 degrees
show : `bool`, optional (default: `None`)
     Show the plot, do not return axis.
save : `bool` or `str`, optional (default: `None`)
    If `True` or a `str`, save the figure. A string is appended to the default
    filename. Infer the filetype if ending on {'.pdf', '.png', '.svg'}.
ax : `matplotlib.Axes`, optional (default: `None`)
    A matplotlib axes object. Only works if plotting a single component.
**kwds : keyword arguments
    Are passed to `matplotlib.pyplot.scatter`.

Returns
-------
A list of `matplotlib.Axes` where the first ax is the groupby categories colorcode, the
second axis is the heatmap and the third axis is the colorbar.
    ]]></help>
  <expand macro="citations"/>
</tool>
