<tool id="pp.filter_genes" name="pp.filter_genes" version="1.3.1+galaxy1">
  <description>Filter genes based on number of cells or counts.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.pp.filter_genes(
   data = '$adata',
   min_counts = '$min_counts',
   min_cells = '$min_cells',
   max_counts = '$max_counts',
   max_cells = '$max_cells',
   copy = '$copy',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="min_counts" type="int" value="None" optional="true" label="min_counts" help="    Minimum number of counts required for a cell to pass filtering."/>
    <param name="min_cells" type="int" value="None" optional="true" label="min_cells" help="    Minimum number of cells expressed required for a cell to pass filtering."/>
    <param name="max_counts" type="int" value="None" optional="true" label="max_counts" help="    Maximum number of counts required for a cell to pass filtering."/>
    <param name="max_cells" type="int" value="None" optional="true" label="max_cells" help="    Maximum number of cells expressed required for a cell to pass filtering."/>
    <param name="copy" type="bool" value="False" optional="true" label="copy" help="    If an :class:`~anndata.AnnData` is passed, determines whether a copy    is returned."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="gene_subset" type="np.ndarray" label="${tool.name} on ${on_string}: gene_subset"/>
    <data name="number_per_cell" type="np.ndarray" label="${tool.name} on ${on_string}: number_per_cell"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="min_counts" value=""/>
      <param name="min_cells" value=""/>
      <param name="max_counts" value=""/>
      <param name="max_cells" value=""/>
      <param name="copy" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="gene_subset" file=""/>
      <output name="number_per_cell" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Filter genes based on number of cells or counts.

Keep genes that have at least `min_counts` counts or are expressed in at
least `min_cells` cells or have at most `max_counts` counts or are expressed
in at most `max_cells` cells.

Only provide one of the optional parameters `min_counts`, `min_cells`,
`max_counts`, `max_cells` per call.

Parameters
----------
data : :class:`~anndata.AnnData`, `np.ndarray`, `sp.spmatrix`
    The (annotated) data matrix of shape `n_obs` Ã— `n_vars`. Rows correspond
    to cells and columns to genes.
min_counts : `int`, optional (default: `None`)
    Minimum number of counts required for a cell to pass filtering.
min_cells : `int`, optional (default: `None`)
    Minimum number of cells expressed required for a cell to pass filtering.
max_counts : `int`, optional (default: `None`)
    Maximum number of counts required for a cell to pass filtering.
max_cells : `int`, optional (default: `None`)
    Maximum number of cells expressed required for a cell to pass filtering.
copy : `bool`, optional (default: `False`)
    If an :class:`~anndata.AnnData` is passed, determines whether a copy
    is returned.

Returns
-------
If `data` is an :class:`~anndata.AnnData`, filters the object and adds    either `n_cells` or `n_counts` to `adata.var`. Otherwise a tuple

gene_subset : `np.ndarray`
    Boolean index mask that does filtering. `True` means that the gene is
    kept. `False` means the gene is removed.
number_per_cell : `np.ndarray`
    Either `n_counts` or `n_cells` per cell.
    ]]></help>
  <expand macro="citations"/>
</tool>
