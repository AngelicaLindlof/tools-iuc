<tool id="pp.recipe_zheng17" name="pp.recipe_zheng17" version="1.3.1+galaxy1">
  <description>Normalization and filtering as of [Zheng17]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.pp.recipe_zheng17(
   adata = '$adata',
   n_top_genes = '$n_top_genes',
   log = '$log',
   plot = '$plot',
   copy = '$copy',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="n_top_genes" type="int" value="" optional="true" label="n_top_genes" help="    Number of genes to keep."/>
    <param name="log" type="bool" value="True" optional="true" label="log" help="    Take logarithm."/>
    <param name="plot" type="bool" value="True" optional="true" label="plot" help="    Show a plot of the gene dispersion vs. mean relation."/>
    <param name="copy" type="bool" value="False" optional="true" label="copy" help="    Return a copy of `adata` instead of updating it."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="n_top_genes" value=""/>
      <param name="log" value=""/>
      <param name="plot" value=""/>
      <param name="copy" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Normalization and filtering as of [Zheng17]_.

Reproduces the preprocessing of [Zheng17]_ - the Cell Ranger R Kit of 10x
Genomics.

Expects non-logarithmized data. If using logarithmized data, pass `log=False`.

The recipe runs the following steps

.. code:: python

    sc.pp.filter_genes(adata, min_counts=1)  # only consider genes with more than 1 count
    sc.pp.normalize_per_cell(                # normalize with total UMI count per cell
         adata, key_n_counts='n_counts_all')
    filter_result = sc.pp.filter_genes_dispersion(  # select highly-variable genes
        adata.X, flavor='cell_ranger', n_top_genes=n_top_genes, log=False)
    adata = adata[:, filter_result.gene_subset]     # subset the genes
    sc.pp.normalize_per_cell(adata)          # renormalize after filtering
    if log: sc.pp.log1p(adata)               # log transform: adata.X = log(adata.X + 1)
    sc.pp.scale(adata)                       # scale to unit variance and shift to zero mean


Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
n_top_genes : `int`, optional (default: 1000)
    Number of genes to keep.
log : `bool`, optional (default: `True`)
    Take logarithm.
plot : `bool`, optional (default: `True`)
    Show a plot of the gene dispersion vs. mean relation.
copy : `bool`, optional (default: `False`)
    Return a copy of `adata` instead of updating it.

Returns
-------
Returns or updates `adata` depending on `copy`.
    ]]></help>
  <expand macro="citations"/>
</tool>
