<tool id="pp.magic" name="pp.magic" version="1.3.1+galaxy1">
    <description>Apply Markov Affinity-based Graph Imputation of Cells (MAGIC)</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements">
        <requirement type="package" version="2.0.10">magic-impute</requirement>
    </expand>
    <command detect_errors="exit_code"><![CDATA[
            python $script_file
        ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

p = sc.pp.magic(
    adata=adata,
    #if $gene_list.name_list != 'custom'
    name_list='$gene_list.name_list',
    #else
    name_list=$gene_list.gene_list.split(','),
    #end if
    k=$k,
    #if $a
    a=$a,
    #end if
    #if $t
    t=$t,
    #end if
    n_pca=$n_pca,
    knn_dist='$knn_dist',
    random_state=$random_state,
    copy=False)

#if $gene_list.name_list == 'custom'
adata = p
#end if

@CMD_anndata_write_outputs@
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <conditional name="gene_list">
            <param name="name_list" type="select" label="Denoised genes to return" help="Default is all genes, but this may require a large amount of memory if the input data is sparse.">
                <option value="all_genes">All genes</option>
                <option value="pca_only">PCA only</option>
                <option value="custom">Custom list</option>
            </param>
            <when value="all_genes"/>
            <when value="pca_only"/>
            <when value="custom">
                <param name="gene_list" type="text" value="" label="Denoised genes to return" help="List of genes separeted by comma, e.g. Mpo,Klf1,Ifitm1, without spaces">
                    <sanitizer invalid_char="">
                        <valid initial="string.ascii_letters,string.digits">
                            <add value="_" />
                            <add value="," />
                            <remove value=" " />
                        </valid>
                    </sanitizer>
                </param>
            </when>
        </conditional>
        <param name="k" type="integer" value="10" label="Number of nearest neighbors on which to build kernel" help=""/>
        <param name="a" type="integer" value="15" optional="true" label="Decay rate of kernel tails" help="If not set, alpha decaying kernel is not used"/>
        <param name="t" type="integer" value="" optional="true" label="Power to which the diffusion operator is powered" help="This sets the level of diffusion. If not set, it is selected according to the Procrustes disparity of the diffused data"/>
        <param name="n_pca" type="integer" value="100" label="Number of principal components to use for calculating neighborhoods" help="For extremely large datasets, using n_pca &lt; 20 allows neighborhoods to be calculated in roughly log(n_samples) time."/>
        <param name="knn_dist" type="select" label="knn_dist" help="    recommended values: 'euclidean', 'cosine', 'precomputed'    Any metric from `scipy.spatial.distance` can be used    distance metric for building kNN graph. If 'precomputed',    `data` should be an n_samples x n_samples distance or    affinity matrix">
            <option value="euclidean">Euclidean</option>
            <option value="cosine">Cosine</option>
            <option value="precomputed">Precomputed</option>
        </param>
        <param name="random_state" type="integer" value="0" label="Random seed" help="Defaults to the global `numpy` random number generator"/>
        <expand macro="anndata_output_format"/>
    </inputs>
    <outputs>
        <expand macro="anndata_outputs"/>
    </outputs>
    <tests>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="paul15.h5ad" />
            </conditional>
            <conditional name="gene_list">
                <param name="name_list" value="all_genes"/>
            </conditional>
            <param name="k" value="5"/>
            <param name="a" value="15"/>
            <param name="n_pca" value="100"/>
            <param name="knn_dist" value="euclidean"/>
            <param name="random_state" value="0"/>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="pp.magic.paul15_all_genes.h5ad" ftype="h5" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="paul15.h5ad" />
            </conditional>
            <conditional name="gene_list">
                <param name="gene_list" value="pca_only"/>
            </conditional>
            <param name="k" value="5"/>
            <param name="a" value="15"/>
            <param name="n_pca" value="100"/>
            <param name="knn_dist" value="euclidean"/>
            <param name="random_state" value="0"/>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="pp.magic.paul15_pca_only.h5ad" ftype="h5" compare="sim_size"/>
        </test>
        <test>
            <conditional name="input">
                <param name="format" value="h5ad" />
                <param name="adata" value="paul15.h5ad" />
            </conditional>
            <conditional name="gene_list">
                <param name="name_list" value="custom"/>
                <param name="name_list" value="Mpo, Klf1, Ifitm1"/>
            </conditional>
            <param name="k" value="5"/>
            <param name="a" value="15"/>
            <param name="n_pca" value="100"/>
            <param name="knn_dist" value="euclidean"/>
            <param name="random_state" value="0"/>
            <param name="anndata_output_format" value="h5ad" />
            <output name="anndata_out_h5ad" file="pp.magic.paul15_custom.h5ad" ftype="h5" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[
MAGIC is an algorithm for denoising and transcript recover of single cells
applied to single-cell sequencing data. MAGIC builds a graph from the data
and uses diffusion to smooth out noise and recover the data manifold.

More information and bug reports
`here <https://github.com/KrishnaswamyLab/MAGIC>`__. For help, visit
<https://krishnaswamylab.org/get-help>.



If `subset_genes` is not `all_genes`, PCA on MAGIC values of cells are stored in
`adata.obsm['X_magic']` and `adata.X` is not modified.
    ]]></help>
    <expand macro="citations"/>
</tool>
