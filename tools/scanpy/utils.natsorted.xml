<tool id="utils.natsorted" name="utils.natsorted" version="1.3.1+galaxy1">
  <description>Sorts an iterable naturally.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc



sc.utils.natsorted(
   seq = '$seq',
   key = '$key',
   reverse = '$reverse',
   alg = '$alg',)
]]></configfile>
  </configfiles>
  <inputs>
    <param name="seq" type="data" format="iterable" value="" label="seq" help="    The input to sort."/>
    <param name="key" type="data" format="callable" value="" optional="true" label="key" help="    A key used to determine how to sort each element of the iterable.    It is **not** applied recursively.    It should accept a single argument and return a single value."/>
    <param name="reverse" type="data" format="{True" value="" optional="true" label="reverse" help="    Return the list in reversed sorted order. The default is    `False`."/>
    <param name="alg" type="data" format="ns enum" value="" optional="true" label="alg" help="    This option is used to control which algorithm `natsort`    uses when sorting. For details into these options, please see    the :class:`ns` class documentation. The default is `ns.INT`."/>
    </inputs>
  <outputs>
    <data name="out: list" type="data" format="" label="${tool.name} on ${on_string}: out: list"/>
    <data name="See Also" type="data" format="" label="${tool.name} on ${on_string}: See Also"/>
    <data name="--------" type="data" format="" label="${tool.name} on ${on_string}: --------"/>
    <data name="natsort_keygen" type="data" format="Generates the key that makes natural sorting possible." label="${tool.name} on ${on_string}: natsort_keygen"/>
    <data name="realsorted" type="data" format="A wrapper for ``natsorted" label="${tool.name} on ${on_string}: realsorted"/>
    <data name="humansorted" type="data" format="A wrapper for ``natsorted" label="${tool.name} on ${on_string}: humansorted"/>
    <data name="index_natsorted" type="data" format="Returns the sorted indexes from `natsorted`." label="${tool.name} on ${on_string}: index_natsorted"/>
    </outputs>
  <tests>
    <test>
      <param name="seq" value=""/>
      <param name="key" value=""/>
      <param name="reverse" value=""/>
      <param name="alg" value=""/>
      <output name="out: list" file=""/>
      <output name="See Also" file=""/>
      <output name="--------" file=""/>
      <output name="natsort_keygen" file=""/>
      <output name="realsorted" file=""/>
      <output name="humansorted" file=""/>
      <output name="index_natsorted" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Sorts an iterable naturally.

Parameters
----------
seq : iterable
    The input to sort.

key : callable, optional
    A key used to determine how to sort each element of the iterable.
    It is **not** applied recursively.
    It should accept a single argument and return a single value.

reverse : {True, False}, optional
    Return the list in reversed sorted order. The default is
    `False`.

alg : ns enum, optional
    This option is used to control which algorithm `natsort`
    uses when sorting. For details into these options, please see
    the :class:`ns` class documentation. The default is `ns.INT`.

Returns
-------
out: list
    The sorted input.

See Also
--------
natsort_keygen : Generates the key that makes natural sorting possible.
realsorted : A wrapper for ``natsorted(seq, alg=ns.REAL)``.
humansorted : A wrapper for ``natsorted(seq, alg=ns.LOCALE)``.
index_natsorted : Returns the sorted indexes from `natsorted`.

Examples
--------
Use `natsorted` just like the builtin `sorted`::

    >>> a = ['num3', 'num5', 'num2']
    >>> natsorted(a)
    ['num2', 'num3', 'num5']
    ]]></help>
  <expand macro="citations"/>
</tool>
