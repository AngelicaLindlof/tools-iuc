<tool id="tl.phate" name="tl.phate" version="1.3.1+galaxy1">
  <description>PHATE [Moon17]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.phate(
   adata = '$adata',
   n_components = '$n_components',
   k = '$k',
   a = '$a',
   n_landmark = '$n_landmark',
   t = '$t',
   gamma = '$gamma',
   n_pca = '$n_pca',
   knn_dist = '$knn_dist',
   mds_dist = '$mds_dist',
   mds = '$mds',
   n_jobs = '$n_jobs',
   random_state = '$random_state',
   verbose = '$verbose',
   copy = '$copy',
   kwargs = '$kwargs',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="n_components" type="int" value="" optional="true" label="n_components" help="    number of dimensions in which the data will be embedded"/>
    <param name="k" type="int" value="" optional="true" label="k" help="    number of nearest neighbors on which to build kernel"/>
    <param name="a" type="int" value="" optional="true" label="a" help="    sets decay rate of kernel tails.    If None, alpha decaying kernel is not used"/>
    <param name="n_landmark" type="int" value="" optional="true" label="n_landmark" help="    number of landmarks to use in fast PHATE"/>
    <param name="t" type="int" value="" optional="true" label="t" help="    power to which the diffusion operator is powered    sets the level of diffusion. If 'auto', t is selected    according to the knee point in the Von Neumann Entropy of    the diffusion operator"/>
    <param name="gamma" type="data" format="float" value="" optional="true" label="gamma" help="    Informational distance constant between -1 and 1.    `gamma=1` gives the PHATE log potential, `gamma=0` gives    a square root potential."/>
    <param name="n_pca" type="int" value="" optional="true" label="n_pca" help="    Number of principal components to use for calculating    neighborhoods. For extremely large datasets, using    n_pca &lt; 20 allows neighborhoods to be calculated in    log(n_samples) time."/>
    <param name="knn_dist" type="data" format="string" value="" optional="true" label="knn_dist" help="    recommended values: 'euclidean' and 'cosine'    Any metric from `scipy.spatial.distance` can be used    distance metric for building kNN graph"/>
    <param name="mds_dist" type="data" format="string" value="" optional="true" label="mds_dist" help="    recommended values: 'euclidean' and 'cosine'    Any metric from `scipy.spatial.distance` can be used    distance metric for MDS"/>
    <param name="mds" type="data" format="{'classic'" value="" optional="true" label="mds" help="    Selects which MDS algorithm is used for dimensionality reduction"/>
    <param name="n_jobs" type="int" value="sc.settings.n_jobs" optional="true" label="n_jobs" help="    The number of jobs to use for the computation.    If `None`, `sc.settings.n_jobs` is used.    If -1 all CPUs are used. If 1 is given, no parallel computing code is    used at all, which is useful for debugging.    For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for    n_jobs = -2, all CPUs but one are used"/>
    <param name="random_state" type="int" value="None" optional="true" label="random_state" help="    Random seed. Defaults to the global `numpy` random number generator"/>
    <param name="verbose" type="bool" value="sc.settings.verbosity" optional="true" label="verbose" help="    If `True` or an integer `&gt;= 2`, print status messages.    If `None`, `sc.settings.verbosity` is used."/>
    <param name="copy" type="bool" value="False" label="copy" help="    Return a copy instead of writing to `adata`."/>
    <param name="kwargs" type="data" format="additional arguments to `phate.PHATE`" value="" label="kwargs" help=""/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="X_phate" type="np.ndarray" label="${tool.name} on ${on_string}: X_phate"/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="n_components" value=""/>
      <param name="k" value=""/>
      <param name="a" value=""/>
      <param name="n_landmark" value=""/>
      <param name="t" value=""/>
      <param name="gamma" value=""/>
      <param name="n_pca" value=""/>
      <param name="knn_dist" value=""/>
      <param name="mds_dist" value=""/>
      <param name="mds" value=""/>
      <param name="n_jobs" value=""/>
      <param name="random_state" value=""/>
      <param name="verbose" value=""/>
      <param name="copy" value=""/>
      <param name="kwargs" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="X_phate" file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        PHATE [Moon17]_.

Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE)
embeds high dimensional single-cell data into two or three dimensions for
visualization of biological progressions.

For more information and access to the object-oriented interface, read the
`PHATE documentation <https://phate.readthedocs.io/>`__.  For
tutorials, bug reports, and R/MATLAB implementations, visit the `PHATE
GitHub page <https://github.com/KrishnaswamyLab/PHATE/>`__. For help
using PHATE, go `here <https://krishnaswamylab.org/get-help>`__.

Parameters
----------
adata : :class:`~anndata.AnnData`
    Annotated data matrix.
n_components : `int`, optional (default: 2)
    number of dimensions in which the data will be embedded
k : `int`, optional (default: 5)
    number of nearest neighbors on which to build kernel
a : `int`, optional (default: 15)
    sets decay rate of kernel tails.
    If None, alpha decaying kernel is not used
n_landmark : `int`, optional (default: 2000)
    number of landmarks to use in fast PHATE
t : `int` or 'auto', optional (default: 'auto')
    power to which the diffusion operator is powered
    sets the level of diffusion. If 'auto', t is selected
    according to the knee point in the Von Neumann Entropy of
    the diffusion operator
gamma : float, optional, default: 1
    Informational distance constant between -1 and 1.
    `gamma=1` gives the PHATE log potential, `gamma=0` gives
    a square root potential.
n_pca : `int`, optional (default: 100)
    Number of principal components to use for calculating
    neighborhoods. For extremely large datasets, using
    n_pca < 20 allows neighborhoods to be calculated in
    log(n_samples) time.
knn_dist : string, optional (default: 'euclidean')
    recommended values: 'euclidean' and 'cosine'
    Any metric from `scipy.spatial.distance` can be used
    distance metric for building kNN graph
mds_dist : string, optional (default: 'euclidean')
    recommended values: 'euclidean' and 'cosine'
    Any metric from `scipy.spatial.distance` can be used
    distance metric for MDS
mds : {'classic', 'metric', 'nonmetric'}, optional (default: 'metric')
    Selects which MDS algorithm is used for dimensionality reduction
n_jobs : `int` or `None`, optional (default: `sc.settings.n_jobs`)
    The number of jobs to use for the computation.
    If `None`, `sc.settings.n_jobs` is used.
    If -1 all CPUs are used. If 1 is given, no parallel computing code is
    used at all, which is useful for debugging.
    For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for
    n_jobs = -2, all CPUs but one are used
random_state : `int`, `numpy.RandomState` or `None`, optional (default: `None`)
    Random seed. Defaults to the global `numpy` random number generator
verbose : `bool`, `int` or `None`, optional (default: `sc.settings.verbosity`)
    If `True` or an integer `>= 2`, print status messages.
    If `None`, `sc.settings.verbosity` is used.
copy : `bool` (default: `False`)
    Return a copy instead of writing to `adata`.
kwargs : additional arguments to `phate.PHATE`

Returns
-------
Depending on `copy`, returns or updates `adata` with the following fields.

X_phate : `np.ndarray`, (`adata.obs`, shape=[n_samples, n_components], dtype `float`)
    PHATE coordinates of data.

Examples
--------
>>> import scanpy.api as sc
>>> import phate
>>> tree_data, tree_clusters = phate.tree.gen_dla(n_dim=100,
                                                  n_branch=20,
                                                  branch_length=100)
>>> tree_data.shape
(2000, 100)
>>> adata = sc.AnnData(tree_data)
>>> sc.tl.phate(adata, k=5, a=20, t=150)
>>> adata.obsm['X_phate'].shape
(2000, 2)
>>> sc.pl.phate(adata)
    ]]></help>
  <expand macro="citations"/>
</tool>
