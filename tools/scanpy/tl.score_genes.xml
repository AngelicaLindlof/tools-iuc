<tool id="tl.score_genes" name="tl.score_genes" version="1.3.1+galaxy1">
  <description>Score a set of genes [Satija15]_.</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <command detect_errors="exit_code"><![CDATA[
        python $script_file
    ]]></command>
  <configfiles>
    <configfile name="script_file"><![CDATA[
import scanpy.api as sc

@CMD_read_inputs

sc.tl.score_genes(
   adata = '$adata',
   gene_list = '$gene_list',
   ctrl_size = '$ctrl_size',
   gene_pool = '$gene_pool',
   n_bins = '$n_bins',
   score_name = '$score_name',
   random_state = '$random_state',
   copy = '$copy',
   use_raw = '$use_raw',)

adata.write_loom($csv_output)
adata.write_csv($loom_output)
]]></configfile>
  </configfiles>
  <inputs>
    <expand macro="inputs_anndata"/>
    <param name="gene_list" type="data" format="iterable" value="" label="gene_list" help="    The list of gene names used for score calculation."/>
    <param name="ctrl_size" type="int" value="" optional="true" label="ctrl_size" help="    Number of reference genes to be sampled. If `len(gene_list)` is not too    low, you can set `ctrl_size=len(gene_list)`."/>
    <param name="gene_pool" type="list" value="None" optional="true" label="gene_pool" help="    Genes for sampling the reference set. Default is all genes."/>
    <param name="n_bins" type="int" value="" optional="true" label="n_bins" help="    Number of expression level bins for sampling."/>
    <param name="score_name" type="str" value="'score'" optional="true" label="score_name" help="    Name of the field to be added in `.obs`."/>
    <param name="random_state" type="int" value="" optional="true" label="random_state" help="    The random seed for sampling."/>
    <param name="copy" type="bool" value="False" optional="true" label="copy" help="    Copy `adata` or modify it inplace."/>
    <param name="use_raw" type="bool" value="False" optional="true" label="use_raw" help="    Use `raw` attribute of `adata` if present."/>
    </inputs>
  <outputs>
    <data name="csv_output" type="data" format="csv" label="${tool.name} on ${on_string}: Annotated matrix (csv)"/>
    <data name="`score_name`." type="data" format="" label="${tool.name} on ${on_string}: `score_name`."/>
    <data name="loom_output" type="data" format="loom" label="${tool.name} on ${on_string}: Annotated matrix (loom)"/>
    </outputs>
  <tests>
    <test>
      <param name="gene_list" value=""/>
      <param name="ctrl_size" value=""/>
      <param name="gene_pool" value=""/>
      <param name="n_bins" value=""/>
      <param name="score_name" value=""/>
      <param name="random_state" value=""/>
      <param name="copy" value=""/>
      <param name="use_raw" value=""/>
      <output name="loom_output" file=""/>
      <output name="csv_output" file=""/>
      <output name="`score_name`." file=""/>
      <output name="loom_output" file=""/>
    </test>
  </tests>
  <help><![CDATA[
        Score a set of genes [Satija15]_.

The score is the average expression of a set of genes subtracted with the
average expression of a reference set of genes. The reference set is
randomly sampled from the `gene_pool` for each binned expression value.

This reproduces the approach in Seurat [Satija15]_ and has been implemented
for Scanpy by Davide Cittaro.

Parameters
----------
adata : :class:`~anndata.AnnData`
    The annotated data matrix.
gene_list : iterable
    The list of gene names used for score calculation.
ctrl_size : `int`, optional (default: 50)
    Number of reference genes to be sampled. If `len(gene_list)` is not too
    low, you can set `ctrl_size=len(gene_list)`.
gene_pool : `list` or `None`, optional (default: `None`)
    Genes for sampling the reference set. Default is all genes.
n_bins : `int`, optional (default: 25)
    Number of expression level bins for sampling.
score_name : `str`, optional (default: `'score'`)
    Name of the field to be added in `.obs`.
random_state : `int`, optional (default: 0)
    The random seed for sampling.
copy : `bool`, optional (default: `False`)
    Copy `adata` or modify it inplace.
use_raw : `bool`, optional (default: `False`)
    Use `raw` attribute of `adata` if present.
Returns
-------
Depending on `copy`, returns or updates `adata` with an additional field
`score_name`.

Examples
--------
See this `notebook <https://github.com/theislab/scanpy_usage/tree/master/180209_cell_cycle>`__.
    ]]></help>
  <expand macro="citations"/>
</tool>
